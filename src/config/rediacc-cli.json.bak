{
  "QUEUE_FUNCTIONS": {
    "os_setup": {
      "description": "Setup operating system with required tools and configurations",
      "params": {
        "datastore_size": {"type": "string", "default": "95%", "help": "Datastore size (e.g., 95%, 100G)"},
        "source": {"type": "string", "default": "apt-repo", "help": "Package source"}
      }
    },
    "hello": {
      "description": "Simple test function that prints hello from hostname",
      "params": {}
    },
    "uninstall": {
      "description": "Cleanup and uninstall system components",
      "params": {}
    },
    "repo_new": {
      "description": "Create a new repository",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name"},
        "size": {"type": "string", "required": true, "help": "Repository size (e.g., 10G)"}
      }
    },
    "repo_mount": {
      "description": "Mount repository filesystems",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name(s), comma-separated"},
        "from": {"type": "string", "help": "Remote machine to mount from"}
      }
    },
    "repo_unmount": {
      "description": "Unmount repository filesystems",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name(s), comma-separated"},
        "from": {"type": "string", "help": "Remote machine to unmount from"}
      }
    },
    "repo_up": {
      "description": "Start repository services using Rediaccfile",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name(s), comma-separated"},
        "option": {"type": "string", "help": "Options (e.g., prep-only)"}
      }
    },
    "repo_down": {
      "description": "Stop repository services",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name(s), comma-separated"}
      }
    },
    "repo_resize": {
      "description": "Resize repository storage",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name"},
        "size": {"type": "string", "required": true, "help": "New size (e.g., 20G)"}
      }
    },
    "repo_rm": {
      "description": "Delete repository",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name"}
      }
    },
    "repo_ownership": {
      "description": "Change repository ownership",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name"},
        "from": {"type": "string", "required": true, "help": "Current owner"},
        "to": {"type": "string", "help": "New owner (default: universal user)"}
      }
    },
    "list_system": {
      "description": "List repositories",
      "params": {
        "kind": {"type": "string", "default": "repo", "help": "Type to list"},
        "format": {"type": "string", "help": "Output format (json)"}
      }
    },
    "repo_push": {
      "description": "Push repository to remote storage",
      "params": {
        "repo": {"type": "string", "required": true, "help": "Repository name(s), comma-separated"},
        "dest": {"type": "string", "required": true, "help": "Destination filename"},
        "to": {"type": "string", "help": "Destination machine/storage"},
        "state": {"type": "string", "help": "Required repository state (online/offline)"},
        "option": {"type": "string", "help": "Options (e.g., override)"}
      }
    },
    "repo_pull": {
      "description": "Pull repository from remote storage",
      "params": {
        "from": {"type": "string", "required": true, "help": "Source machine/storage"},
        "repo": {"type": "string", "required": true, "help": "Repository name(s), comma-separated"}
      }
    }
  },
  "CMD_CONFIG": {
    "login": {
      "auth_required": false,
      "endpoint": "CreateAuthenticationRequest",
      "auth_type": "credentials",
      "params": "lambda args: {'name': args.session_name or 'CLI Session', '2FACode': args.tfa_code, 'requestedPermissions': args.permissions, 'tokenExpirationHours': args.expiration, 'target': getattr(args, 'target', None)}",
      "success_msg": "Successfully logged in as {email}"
    },
    "logout": {
      "auth_required": true,
      "endpoint": "DeleteUserRequest",
      "auth_type": "token",
      "success_msg": "Successfully logged out"
    },
    "create": {
      "company": {
        "endpoint": "CreateNewCompany",
        "auth_type": "credentials",
        "params": "lambda args: {'companyName': args.name, 'activationCode': args.activation_code or TEST_ACTIVATION_CODE, 'subscriptionPlan': args.plan or 'COMMUNITY'}",
        "success_msg": "Successfully created company: {name}"
      },
      "user": {
        "endpoint": "CreateNewUser",
        "params": "lambda args: {'newUserEmail': args.email, 'newUserHash': pwd_hash(args.password), 'activationCode': args.activation_code or TEST_ACTIVATION_CODE}",
        "success_msg": "Successfully created user: {email}"
      },
      "team": {
        "endpoint": "CreateTeam",
        "params": "lambda args: {'teamName': args.name, 'teamVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created team: {name}"
      },
      "region": {
        "endpoint": "CreateRegion",
        "params": "lambda args: {'regionName': args.name, 'regionVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created region: {name}"
      },
      "bridge": {
        "endpoint": "CreateBridge",
        "params": "lambda args: {'regionName': args.region, 'bridgeName': args.name, 'bridgeVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created bridge: {name} in region {region}"
      },
      "machine": {
        "endpoint": "CreateMachine",
        "params": "lambda args: {'teamName': args.team, 'bridgeName': args.bridge, 'machineName': args.name, 'machineVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created machine: {name} for team {team}"
      },
      "repository": {
        "endpoint": "CreateRepository",
        "params": "lambda args: {'teamName': args.team, 'repoName': args.name, 'repoVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created repository: {name} for team {team}"
      },
      "storage": {
        "endpoint": "CreateStorage",
        "params": "lambda args: {'teamName': args.team, 'storageName': args.name, 'storageVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created storage: {name} for team {team}"
      },
      "schedule": {
        "endpoint": "CreateSchedule",
        "params": "lambda args: {'teamName': args.team, 'scheduleName': args.name, 'scheduleVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created schedule: {name} for team {team}"
      },
      "queue-item": {
        "endpoint": "CreateQueueItem",
        "params": "lambda args: {'teamName': args.team, 'machineName': args.machine, 'bridgeName': args.bridge, 'queueVault': get_vault_data(args) or '{}', 'priority': getattr(args, 'priority', 3)}",
        "success_msg": "Successfully created queue item for machine {machine} with priority {priority}"
      }
    },
    "list": {
      "teams": {
        "endpoint": "GetCompanyTeams",
        "params": "lambda args: {}"
      },
      "regions": {
        "endpoint": "GetCompanyRegions",
        "params": "lambda args: {}"
      },
      "bridges": {
        "endpoint": "GetRegionBridges",
        "params": "lambda args: {'regionName': args.region}"
      },
      "users": {
        "endpoint": "GetCompanyUsers",
        "params": "lambda args: {}"
      },
      "sessions": {
        "endpoint": "GetUserRequests",
        "params": "lambda args: {}"
      },
      "resource-limits": {
        "endpoint": "GetCompanyDashboardJson",
        "params": "lambda args: {}"
      },
      "subscription": {
        "endpoint": "GetCompanyDashboardJson",
        "params": "lambda args: {}"
      },
      "data-graph": {
        "endpoint": "GetCompanyDataGraphJson",
        "params": "lambda args: {}"
      },
      "company-vault": {
        "endpoint": "GetCompanyVault",
        "params": "lambda args: {}"
      },
      "lookup-data": {
        "endpoint": "GetLookupData",
        "params": "lambda args: {'context': getattr(args, 'context', None)}"
      },
      "user-company": {
        "endpoint": "GetUserCompany",
        "params": "lambda args: {}"
      },
      "audit-logs": {
        "endpoint": "GetAuditLogs",
        "params": "lambda args: {'startDate': getattr(args, 'start_date', None), 'endDate': getattr(args, 'end_date', None), 'entityFilter': getattr(args, 'entity_filter', None), 'maxRecords': getattr(args, 'max_records', None)}"
      },
      "entity-history": {
        "endpoint": "GetEntityHistory",
        "params": "lambda args: {'entity': args.entity_type, 'credential': args.credential, 'maxRecords': getattr(args, 'max_records', None)}"
      },
      "team-machines": {
        "endpoint": "GetTeamMachines",
        "params": "lambda args: {'teamName': args.team}"
      },
      "team-members": {
        "endpoint": "GetTeamMembers",
        "params": "lambda args: {'teamName': args.team}"
      },
      "team-repositories": {
        "endpoint": "GetTeamRepositories",
        "params": "lambda args: {'teamName': args.team}"
      },
      "team-schedules": {
        "endpoint": "GetTeamSchedules",
        "params": "lambda args: {'teamName': args.team}"
      },
      "team-storages": {
        "endpoint": "GetTeamStorages",
        "params": "lambda args: {'teamName': args.team}"
      }
    },
    "rm": {
      "team": {
        "endpoint": "DeleteTeam",
        "params": "lambda args: {'teamName': args.name}",
        "confirm_msg": "Are you sure you want to delete team '{name}'? This will remove all resources in the team.",
        "success_msg": "Successfully deleted team: {name}"
      },
      "machine": {
        "endpoint": "DeleteMachine",
        "params": "lambda args: {'teamName': args.team, 'machineName': args.name}",
        "confirm_msg": "Are you sure you want to delete machine '{name}' from team '{team}'?",
        "success_msg": "Successfully deleted machine: {name}"
      },
      "bridge": {
        "endpoint": "DeleteBridge",
        "params": "lambda args: {'regionName': args.region, 'bridgeName': args.name}",
        "confirm_msg": "Are you sure you want to delete bridge '{name}' from region '{region}'?",
        "success_msg": "Successfully deleted bridge: {name}"
      },
      "region": {
        "endpoint": "DeleteRegion",
        "params": "lambda args: {'regionName': args.name}",
        "confirm_msg": "Are you sure you want to delete region '{name}'? This will remove all bridges in the region.",
        "success_msg": "Successfully deleted region: {name}"
      },
      "repository": {
        "endpoint": "DeleteRepository",
        "params": "lambda args: {'teamName': args.team, 'repoName': args.name}",
        "confirm_msg": "Are you sure you want to delete repository '{name}' from team '{team}'?",
        "success_msg": "Successfully deleted repository: {name}"
      },
      "storage": {
        "endpoint": "DeleteStorage",
        "params": "lambda args: {'teamName': args.team, 'storageName': args.name}",
        "confirm_msg": "Are you sure you want to delete storage '{name}' from team '{team}'?",
        "success_msg": "Successfully deleted storage: {name}"
      },
      "schedule": {
        "endpoint": "DeleteSchedule",
        "params": "lambda args: {'teamName': args.team, 'scheduleName': args.name}",
        "confirm_msg": "Are you sure you want to delete schedule '{name}' from team '{team}'?",
        "success_msg": "Successfully deleted schedule: {name}"
      },
      "queue-item": {
        "endpoint": "DeleteQueueItem",
        "params": "lambda args: {'taskId': args.task_id}",
        "confirm_msg": "Are you sure you want to delete queue item '{task_id}'?",
        "success_msg": "Successfully deleted queue item: {task_id}"
      }
    },
    "bridge": {
      "reset-auth": {
        "endpoint": "ResetBridgeAuthorization",
        "params": "lambda args: {'bridgeName': args.name}",
        "confirm_msg": "Are you sure you want to reset authorization for bridge '{name}'? This will generate new credentials.",
        "success_msg": "Successfully reset authorization for bridge: {name}"
      }
    },
    "update": {
      "team": {
        "endpoint": "UpdateTeamName",
        "params": "lambda args: {'teamName': args.name, 'newTeamName': args.new_name}",
        "success_msg": "Successfully updated team name: {name} → {new_name}"
      },
      "region": {
        "endpoint": "UpdateRegionName", 
        "params": "lambda args: {'regionName': args.name, 'newRegionName': args.new_name}",
        "success_msg": "Successfully updated region name: {name} → {new_name}"
      },
      "bridge": {
        "endpoint": "UpdateBridgeName",
        "params": "lambda args: {'regionName': args.region, 'bridgeName': args.name, 'newBridgeName': args.new_name}",
        "success_msg": "Successfully updated bridge name: {name} → {new_name}"
      },
      "machine": {
        "endpoint": "UpdateMachineName",
        "params": "lambda args: {'teamName': args.team, 'machineName': args.name, 'newMachineName': args.new_name}",
        "success_msg": "Successfully updated machine name: {name} → {new_name}"
      },
      "machine-bridge": {
        "endpoint": "UpdateMachineAssignedBridge",
        "params": "lambda args: {'teamName': args.team, 'machineName': args.name, 'newBridgeName': args.new_bridge}",
        "success_msg": "Successfully updated machine bridge: {name} → {new_bridge}"
      },
      "repository": {
        "endpoint": "UpdateRepositoryName",
        "params": "lambda args: {'teamName': args.team, 'repoName': args.name, 'newRepoName': args.new_name}",
        "success_msg": "Successfully updated repository name: {name} → {new_name}"
      },
      "repository-vault": {
        "endpoint": "UpdateRepositoryVault",
        "params": "lambda args: {'teamName': args.team, 'repoName': args.name, 'repoVault': get_vault_data(args) or '{}', 'vaultVersion': getattr(args, 'vault_version', 1)}",
        "success_msg": "Successfully updated repository vault: {name}"
      },
      "storage": {
        "endpoint": "UpdateStorageName",
        "params": "lambda args: {'teamName': args.team, 'storageName': args.name, 'newStorageName': args.new_name}",
        "success_msg": "Successfully updated storage name: {name} → {new_name}"
      },
      "storage-vault": {
        "endpoint": "UpdateStorageVault",
        "params": "lambda args: {'teamName': args.team, 'storageName': args.name, 'storageVault': get_vault_data(args) or '{}', 'vaultVersion': getattr(args, 'vault_version', 1)}",
        "success_msg": "Successfully updated storage vault: {name}"
      },
      "schedule": {
        "endpoint": "UpdateScheduleName",
        "params": "lambda args: {'teamName': args.team, 'scheduleName': args.name, 'newScheduleName': args.new_name}",
        "success_msg": "Successfully updated schedule name: {name} → {new_name}"
      },
      "schedule-vault": {
        "endpoint": "UpdateScheduleVault",
        "params": "lambda args: {'teamName': args.team, 'scheduleName': args.name, 'scheduleVault': get_vault_data(args) or '{}', 'vaultVersion': getattr(args, 'vault_version', 1)}",
        "success_msg": "Successfully updated schedule vault: {name}"
      },
      "machine-status": {
        "endpoint": "UpdateMachineStatus",
        "params": "lambda args: {'teamName': args.team, 'machineName': args.name, 'status': args.status}",
        "success_msg": "Successfully updated machine status: {name}"
      }
    },
    "vault": {
      "set": {
        "endpoints": {
          "team": "UpdateTeamVault",
          "machine": "UpdateMachineVault",
          "region": "UpdateRegionVault",
          "bridge": "UpdateBridgeVault",
          "company": "UpdateCompanyVault",
          "repository": "UpdateRepositoryVault",
          "storage": "UpdateStorageVault",
          "schedule": "UpdateScheduleVault"
        },
        "params": "lambda args: get_vault_set_params(args)",
        "success_msg": "Successfully updated {resource_type} vault"
      }
    },
    "distributed-storage": {
      "create-cluster": {
        "endpoint": "CreateDistributedStorageCluster",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.name, 'clusterVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully created distributed storage cluster: {name} for team {team}"
      },
      "delete-cluster": {
        "endpoint": "DeleteDistributedStorageCluster",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.name}",
        "confirm_msg": "Are you sure you want to delete distributed storage cluster '{name}' from team '{team}'?",
        "success_msg": "Successfully deleted distributed storage cluster: {name}"
      },
      "get-cluster": {
        "endpoint": "GetDistributedStorageCluster",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.name}"
      },
      "list-clusters": {
        "endpoint": "ListDistributedStorageClusters",
        "params": "lambda args: {'teamName': args.team}"
      },
      "add-machines": {
        "endpoint": "AddMachinesToDistributedStorage",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.cluster, 'machineNames': args.machines}",
        "success_msg": "Successfully added machines to distributed storage cluster: {cluster}"
      },
      "remove-machines": {
        "endpoint": "RemoveMachinesFromDistributedStorage",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.cluster, 'machineNames': args.machines}",
        "confirm_msg": "Are you sure you want to remove machines from cluster '{cluster}'?",
        "success_msg": "Successfully removed machines from distributed storage cluster: {cluster}"
      },
      "update-status": {
        "endpoint": "UpdateDistributedStorageClusterStatus",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.cluster, 'status': args.status}",
        "success_msg": "Successfully updated distributed storage cluster status: {cluster}"
      },
      "update-vault": {
        "endpoint": "UpdateDistributedStorageClusterVault",
        "params": "lambda args: {'teamName': args.team, 'clusterName': args.cluster, 'clusterVault': get_vault_data(args) or '{}', 'vaultVersion': getattr(args, 'vault_version', 1)}",
        "success_msg": "Successfully updated distributed storage cluster vault: {cluster}"
      }
    },
    "permission": {
      "create-group": {
        "endpoint": "CreatePermissionGroup",
        "params": "lambda args: {'permissionGroupName': args.name}",
        "success_msg": "Successfully created permission group: {name}"
      },
      "delete-group": {
        "endpoint": "DeletePermissionGroup",
        "params": "lambda args: {'permissionGroupName': args.name}",
        "confirm_msg": "Are you sure you want to delete permission group '{name}'?",
        "success_msg": "Successfully deleted permission group: {name}"
      },
      "add": {
        "endpoint": "CreatePermissionInGroup",
        "params": "lambda args: {'permissionGroupName': args.group, 'permissionName': args.name}",
        "success_msg": "Successfully added permission: {name} to group {group}"
      },
      "remove": {
        "endpoint": "DeletePermissionFromGroup",
        "params": "lambda args: {'permissionGroupName': args.group, 'permissionName': args.name}",
        "confirm_msg": "Are you sure you want to remove permission '{name}' from group '{group}'?",
        "success_msg": "Successfully removed permission: {name} from group {group}"
      },
      "assign": {
        "endpoint": "UpdateUserAssignedPermissions",
        "params": "lambda args: {'userEmail': args.email, 'permissionGroupName': args.group}",
        "success_msg": "Successfully assigned permission group {group} to user {email}"
      },
      "list-groups": {
        "endpoint": "GetCompanyPermissionGroups",
        "params": "lambda args: {}"
      },
      "list-group": {
        "endpoint": "GetPermissionGroupDetails",
        "params": "lambda args: {'permissionGroupName': args.name}"
      }
    },
    "company": {
      "block-user-requests": {
        "endpoint": "UpdateCompanyBlockUserRequests",
        "params": "lambda args: {'block': args.block}",
        "success_msg": "Successfully updated company user request blocking: {block}"
      },
      "update-vault": {
        "endpoint": "UpdateCompanyVault",
        "params": "lambda args: {'companyVault': get_vault_data(args) or '{}', 'vaultVersion': getattr(args, 'vault_version', None)}",
        "success_msg": "Successfully updated company vault"
      },
      "get-vaults": {
        "endpoint": "GetCompanyVaults",
        "params": "lambda args: {}"
      },
      "update-vaults": {
        "endpoint": "UpdateCompanyVaults",
        "params": "lambda args: {'vaults': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully updated company vaults"
      }
    },
    "audit": {
      "trace": {
        "endpoint": "GetEntityAuditTrace",
        "params": "lambda args: {'entity': args.entity_type, 'credential': args.credential, 'maxRecords': getattr(args, 'max_records', None)}"
      }
    },
    "user": {
      "activate": {
        "auth_required": false,
        "endpoint": "ActivateUserAccount",
        "params": "lambda args: {'userEmail': args.email, 'activationCode': args.code or TEST_ACTIVATION_CODE}",
        "success_msg": "Successfully activated user: {email}"
      },
      "deactivate": {
        "endpoint": "UpdateUserToDeactivated",
        "params": "lambda args: {'userEmail': args.email}",
        "confirm_msg": "Are you sure you want to deactivate user '{email}'?",
        "success_msg": "Successfully deactivated user: {email}"
      },
      "update-email": {
        "endpoint": "UpdateUserEmail",
        "params": "lambda args: {'currentUserEmail': args.current_email, 'newUserEmail': args.new_email}",
        "success_msg": "Successfully updated user email: {current_email} → {new_email}"
      },
      "update-password": {
        "endpoint": "UpdateUserPassword",
        "params": "lambda args: {'userNewPass': pwd_hash(args.new_password)}",
        "success_msg": "Successfully updated user password"
      },
      "update-2fa": {
        "endpoint": "UpdateUser2FA",
        "params": "lambda args: {'enable': args.enable, 'userHash': pwd_hash(args.password), 'currentCode': getattr(args, 'current_code', None)}",
        "success_msg": "Successfully updated 2FA settings"
      }
    },
    "auth": {
      "status": {
        "endpoint": "GetRequestAuthenticationStatus",
        "params": "lambda args: {'requestHash': args.request_hash}"
      },
      "privilege": {
        "endpoint": "PrivilegeAuthenticationRequest",
        "params": "lambda args: {'requestHash': args.request_hash, 'privilege': args.privilege}",
        "success_msg": "Successfully privileged authentication request"
      }
    },
    "team-member": {
      "add": {
        "endpoint": "CreateTeamMembership",
        "params": "lambda args: {'teamName': args.team, 'newUserEmail': args.email}",
        "success_msg": "Successfully added {email} to team {team}"
      },
      "remove": {
        "endpoint": "DeleteUserFromTeam",
        "params": "lambda args: {'teamName': args.team, 'removeUserEmail': args.email}",
        "confirm_msg": "Are you sure you want to remove '{email}' from team '{team}'?",
        "success_msg": "Successfully removed {email} from team {team}"
      }
    },
    "queue": {
      "get-next": {
        "endpoint": "GetQueueItemsNext",
        "params": "lambda args: {'itemCount': args.count or 3}"
      },
      "list": {
        "endpoint": "GetTeamQueueItems",
        "params": "lambda args: {'teamName': getattr(args, 'team', None), 'machineName': getattr(args, 'machine', None), 'bridgeName': getattr(args, 'bridge', None), 'status': getattr(args, 'status', None), 'priority': getattr(args, 'priority', None), 'minPriority': getattr(args, 'min_priority', None), 'maxPriority': getattr(args, 'max_priority', None), 'dateFrom': getattr(args, 'date_from', None), 'dateTo': getattr(args, 'date_to', None), 'taskId': getattr(args, 'task_id', None), 'includeCompleted': getattr(args, 'include_completed', True), 'includeCancelled': getattr(args, 'include_cancelled', True), 'onlyStale': getattr(args, 'only_stale', False), 'staleThresholdMinutes': getattr(args, 'stale_threshold', None), 'maxRecords': getattr(args, 'max_records', None)}"
      },
      "update-response": {
        "endpoint": "UpdateQueueItemResponse",
        "params": "lambda args: {'taskId': args.task_id, 'responseVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully updated queue item response: {task_id}"
      },
      "complete": {
        "endpoint": "UpdateQueueItemToCompleted",
        "params": "lambda args: {'taskId': args.task_id, 'finalVault': get_vault_data(args) or '{}'}",
        "success_msg": "Successfully completed queue item: {task_id}"
      },
      "trace": {
        "endpoint": "GetQueueItemTrace",
        "params": "lambda args: {'taskId': args.task_id}"
      },
      "cancel": {
        "endpoint": "CancelQueueItem",
        "params": "lambda args: {'taskId': args.task_id}",
        "confirm_msg": "Are you sure you want to cancel queue item '{task_id}'?",
        "success_msg": "Successfully cancelled queue item: {task_id}"
      },
      "retry": {
        "endpoint": "RetryFailedQueueItem",
        "params": "lambda args: {'taskId': args.task_id}",
        "success_msg": "Successfully retried queue item: {task_id}"
      }
    },
    "inspect": {
      "machine": {
        "endpoint": "GetTeamMachines",
        "params": "lambda args: {'teamName': args.team}",
        "filter": "lambda data, args: [m for m in data if m.get('machineName') == args.name]",
        "single_result": true
      },
      "repository": {
        "endpoint": "GetTeamRepositories", 
        "params": "lambda args: {'teamName': args.team}",
        "filter": "lambda data, args: [r for r in data if r.get('repoName') == args.name]",
        "single_result": true
      }
    }
  },
  "ARG_DEFS": {
    "login": [
      {"name": "--email", "help": "User email address"},
      {"name": "--password", "help": "User password"},
      {"name": "--master-password", "help": "Master password for vault encryption"},
      {"name": "--session-name", "help": "Name for this session"},
      {"name": "--tfa-code", "help": "Two-factor authentication code"},
      {"name": "--permissions", "help": "Requested permission group"},
      {"name": "--expiration", "type": "int", "help": "Token expiration in hours (default: 24)"},
      {"name": "--target", "help": "Target resource (e.g., bridge name for bridge token)"}
    ],
    "logout": [],
    "create": {
      "company": [
        {"name": "name", "help": "Company name"},
        {"name": "--email", "help": "Admin email address"},
        {"name": "--password", "help": "Admin password"},
        {"name": "--activation-code", "help": "Activation code (default: 111111)"},
        {"name": "--plan", "help": "Subscription plan", "choices": ["COMMUNITY", "ADVANCED", "PREMIUM", "ELITE"]}
      ],
      "user": [
        {"name": "email", "help": "User email address"},
        {"name": "--password", "help": "User password"},
        {"name": "--activation-code", "help": "Activation code (default: 111111)"}
      ],
      "team": [
        {"name": "name", "help": "Team name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "region": [
        {"name": "name", "help": "Region name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "bridge": [
        {"name": "region", "help": "Region name"},
        {"name": "name", "help": "Bridge name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "machine": [
        {"name": "team", "help": "Team name"},
        {"name": "bridge", "help": "Bridge name"},
        {"name": "name", "help": "Machine name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "repository": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Repository name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "storage": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Storage name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "schedule": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Schedule name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "queue-item": [
        {"name": "team", "help": "Team name"},
        {"name": "machine", "help": "Machine name"},
        {"name": "bridge", "help": "Bridge name"},
        {"name": "--priority", "type": "int", "default": 3, "choices": [1, 2, 3, 4, 5], "help": "Priority level (1=highest, 5=lowest, default=3). Premium/Elite subscriptions only."},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ]
    },
    "list": {
      "teams": [],
      "regions": [],
      "users": [],
      "sessions": [],
      "resource-limits": [],
      "subscription": [],
      "bridges": [{"name": "region", "help": "Region name"}],
      "data-graph": [],
      "company-vault": [],
      "lookup-data": [{"name": "--context", "help": "Context filter (e.g., machine_create, queue_create)"}],
      "user-company": [],
      "audit-logs": [
        {"name": "--start-date", "help": "Start date for audit logs (ISO format)"},
        {"name": "--end-date", "help": "End date for audit logs (ISO format)"},
        {"name": "--entity-filter", "help": "Filter by entity type (e.g., Team, Machine, User)"},
        {"name": "--max-records", "type": "int", "help": "Maximum number of records to retrieve (default: 1000)"}
      ],
      "entity-history": [
        {"name": "entity_type", "help": "Entity type (e.g., Team, Machine, User, Region, Bridge)"},
        {"name": "credential", "help": "Entity credential (GUID)"},
        {"name": "--max-records", "type": "int", "help": "Maximum number of records to retrieve (default: 500)"}
      ],
      "team-machines": [{"name": "team", "help": "Team name"}],
      "team-members": [{"name": "team", "help": "Team name"}],
      "team-repositories": [{"name": "team", "help": "Team name"}],
      "team-schedules": [{"name": "team", "help": "Team name"}],
      "team-storages": [{"name": "team", "help": "Team name"}]
    },
    "update": {
      "team": [
        {"name": "name", "help": "Team name"},
        {"name": "new_name", "help": "New team name"}
      ],
      "region": [
        {"name": "name", "help": "Region name"},
        {"name": "new_name", "help": "New region name"}
      ],
      "bridge": [
        {"name": "region", "help": "Region name"},
        {"name": "name", "help": "Bridge name"},
        {"name": "new_name", "help": "New bridge name"}
      ],
      "machine": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Machine name"},
        {"name": "new_name", "help": "New machine name"}
      ],
      "machine-bridge": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Machine name"},
        {"name": "new_bridge", "help": "New bridge name"}
      ],
      "repository": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Repository name"},
        {"name": "new_name", "help": "New repository name"}
      ],
      "storage": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Storage name"},
        {"name": "new_name", "help": "New storage name"}
      ],
      "schedule": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Schedule name"},
        {"name": "new_name", "help": "New schedule name"}
      ],
      "repository-vault": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Repository name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"},
        {"name": "--vault-version", "type": "int", "help": "Vault version"}
      ],
      "storage-vault": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Storage name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"},
        {"name": "--vault-version", "type": "int", "help": "Vault version"}
      ],
      "schedule-vault": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Schedule name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"},
        {"name": "--vault-version", "type": "int", "help": "Vault version"}
      ],
      "machine-status": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Machine name"},
        {"name": "status", "help": "New status value"}
      ]
    },
    "rm": {
      "team": [
        {"name": "name", "help": "Team name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "machine": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Machine name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "bridge": [
        {"name": "region", "help": "Region name"},
        {"name": "name", "help": "Bridge name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "region": [
        {"name": "name", "help": "Region name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "repository": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Repository name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "storage": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Storage name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "schedule": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Schedule name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "queue-item": [
        {"name": "task_id", "help": "Task ID"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ]
    },
    "vault": {
      "set": [
        {"name": "resource_type", "help": "Resource type", "choices": ["team", "machine", "region", "bridge", "company", "repository", "storage", "schedule"]},
        {"name": "name", "help": "Resource name"},
        {"name": "file", "nargs": "?", "help": "File containing JSON vault data (or - for stdin)"},
        {"name": "--team", "help": "Team name (for machine, repository, storage, schedule)"},
        {"name": "--region", "help": "Region name (for bridge)"},
        {"name": "--vault-version", "type": "int", "help": "Vault version"}
      ],
      "set-password": [],
      "clear-password": [],
      "status": []
    },
    "permission": {
      "create-group": [
        {"name": "name", "help": "Permission group name"}
      ],
      "delete-group": [
        {"name": "name", "help": "Permission group name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "add": [
        {"name": "group", "help": "Permission group name"},
        {"name": "name", "help": "Permission name"}
      ],
      "remove": [
        {"name": "group", "help": "Permission group name"},
        {"name": "name", "help": "Permission name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "assign": [
        {"name": "email", "help": "User email address"},
        {"name": "group", "help": "Permission group name"}
      ],
      "list-groups": [],
      "list-group": [
        {"name": "name", "help": "Permission group name"}
      ]
    },
    "user": {
      "activate": [
        {"name": "email", "help": "User email address"},
        {"name": "--code", "help": "Activation code (default: 111111)"}
      ],
      "deactivate": [
        {"name": "email", "help": "User email address"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "update-email": [
        {"name": "current_email", "help": "Current user email"},
        {"name": "new_email", "help": "New user email"}
      ],
      "update-password": [
        {"name": "--new-password", "help": "New password"}
      ],
      "update-2fa": [
        {"name": "enable", "help": "Enable (1/true) or disable (0/false) 2FA", "type": "lambda x: bool(int(x) if x in ['0', '1'] else x.lower() == 'true')"},
        {"name": "--password", "help": "Current password for verification"},
        {"name": "--current-code", "help": "Current 2FA code (required when disabling)"}
      ]
    },
    "team-member": {
      "add": [
        {"name": "team", "help": "Team name"},
        {"name": "email", "help": "User email address"}
      ],
      "remove": [
        {"name": "team", "help": "Team name"},
        {"name": "email", "help": "User email address"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ]
    },
    "bridge": {
      "reset-auth": [
        {"name": "name", "help": "Bridge name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ]
    },
    "queue": {
      "get-next": [
        {"name": "--count", "type": "int", "help": "Number of items to retrieve (default: 3)"}
      ],
      "list": [
        {"name": "--team", "help": "Filter by team name(s), comma-separated"},
        {"name": "--machine", "help": "Filter by specific machine name"},
        {"name": "--bridge", "help": "Filter by specific bridge name"},
        {"name": "--status", "help": "Filter by status(es), comma-separated (e.g., PENDING,PROCESSING)"},
        {"name": "--priority", "type": "int", "help": "Filter by specific priority (1-5)"},
        {"name": "--min-priority", "type": "int", "help": "Filter by minimum priority (1-5)"},
        {"name": "--max-priority", "type": "int", "help": "Filter by maximum priority (1-5)"},
        {"name": "--date-from", "help": "Filter by date range start (ISO format)"},
        {"name": "--date-to", "help": "Filter by date range end (ISO format)"},
        {"name": "--task-id", "help": "Search for specific task ID"},
        {"name": "--no-completed", "dest": "include_completed", "action": "store_false", "help": "Exclude completed items (default: include)"},
        {"name": "--no-cancelled", "dest": "include_cancelled", "action": "store_false", "help": "Exclude cancelled items (default: include)"},
        {"name": "--only-stale", "action": "store_true", "help": "Show only stale items"},
        {"name": "--stale-threshold", "type": "int", "help": "Custom stale threshold in minutes (default: 10)"},
        {"name": "--max-records", "type": "int", "help": "Maximum records to retrieve (default: 1000, max: 10000)"}
      ],
      "update-response": [
        {"name": "task_id", "help": "Task ID"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "complete": [
        {"name": "task_id", "help": "Task ID"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "add": [
        {"name": "team", "help": "Team name"},
        {"name": "machine", "help": "Machine name"},
        {"name": "bridge", "help": "Bridge name"},
        {"name": "function", "help": "Function to execute", "choices": ["os_setup", "hello", "uninstall", "repo_new", "repo_mount", "repo_unmount", "repo_up", "repo_down", "repo_resize", "repo_rm", "repo_ownership", "list_system", "repo_push", "repo_pull"]},
        {"name": "--description", "help": "Queue item description"},
        {"name": "--priority", "type": "int", "default": 5, "help": "Priority (1-10, default: 5)"}
      ],
      "list-functions": [],
      "trace": [
        {"name": "task_id", "help": "Task ID to trace"}
      ],
      "cancel": [
        {"name": "task_id", "help": "Task ID to cancel"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "retry": [
        {"name": "task_id", "help": "Task ID to retry"}
      ]
    },
    "company": {
      "block-user-requests": [
        {"name": "block", "help": "Block user requests (true/false)", "type": "lambda x: x.lower() == 'true'"}
      ],
      "update-vault": [
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"},
        {"name": "--vault-version", "type": "int", "help": "Vault version"}
      ],
      "get-vaults": [],
      "update-vaults": [
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ]
    },
    "audit": {
      "trace": [
        {"name": "entity_type", "help": "Entity type (e.g., Team, Machine, User, Region, Bridge)"},
        {"name": "credential", "help": "Entity credential (GUID)"},
        {"name": "--max-records", "type": "int", "help": "Maximum number of records to retrieve"}
      ]
    },
    "inspect": {
      "machine": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Machine name"}
      ],
      "repository": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Repository name"}
      ]
    },
    "distributed-storage": {
      "create-cluster": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Cluster name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"}
      ],
      "delete-cluster": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Cluster name"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "get-cluster": [
        {"name": "team", "help": "Team name"},
        {"name": "name", "help": "Cluster name"}
      ],
      "list-clusters": [
        {"name": "team", "help": "Team name"}
      ],
      "add-machines": [
        {"name": "team", "help": "Team name"},
        {"name": "cluster", "help": "Cluster name"},
        {"name": "machines", "help": "Comma-separated list of machine names"}
      ],
      "remove-machines": [
        {"name": "team", "help": "Team name"},
        {"name": "cluster", "help": "Cluster name"},
        {"name": "machines", "help": "Comma-separated list of machine names"},
        {"name": "--force", "action": "store_true", "help": "Skip confirmation"}
      ],
      "update-status": [
        {"name": "team", "help": "Team name"},
        {"name": "cluster", "help": "Cluster name"},
        {"name": "status", "help": "New status value"}
      ],
      "update-vault": [
        {"name": "team", "help": "Team name"},
        {"name": "cluster", "help": "Cluster name"},
        {"name": "--vault", "help": "JSON vault data"},
        {"name": "--vault-file", "help": "File containing JSON vault data"},
        {"name": "--vault-version", "type": "int", "help": "Vault version (default: 1)"}
      ]
    },
    "auth": {
      "status": [
        {"name": "request_hash", "help": "Request hash to check status for"}
      ],
      "privilege": [
        {"name": "request_hash", "help": "Request hash to privilege"},
        {"name": "privilege", "help": "Privilege level to grant"}
      ]
    }
  }
}