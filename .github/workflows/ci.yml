name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  lint-build-test:
    name: lint+build+test (${{ matrix.os }}, py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true

      - name: Upgrade pip tooling
        run: |
          python -m pip install --upgrade pip wheel setuptools build

      - name: Install dev dependencies
        run: |
          python -m pip install mypy flake8 black

      - name: Editable install (dev)
        run: |
          python -m pip install -e ".[dev]"

      - name: Provide mypy CI config
        run: |
          python - <<'PY'
          import pathlib
          cfg = pathlib.Path('.github')
          cfg.mkdir(parents=True, exist_ok=True)
          (cfg / 'mypy-ci.ini').write_text('''[mypy]
          python_version = 3.9
          ignore_missing_imports = True
          no_strict_optional = True
          follow_imports = skip
          warn_unused_configs = False
          ''', encoding='utf-8')
          print('Wrote .github/mypy-ci.ini')
          PY

      - name: Type check (targeted)
        run: |
          python -m mypy --config-file .github/mypy-ci.ini \
            src/cli/setup_hooks.py src/cli/__init__.py src/cli/_setup_cmds.py

      - name: Lint (targeted)
        run: |
          black --check setup.py src/cli/__init__.py src/cli/setup_hooks.py src/cli/_setup_cmds.py
          flake8 setup.py src/cli/__init__.py src/cli/setup_hooks.py src/cli/_setup_cmds.py

      - name: Build sdist and wheel
        run: |
          python -m build
          python - <<'PY'
          from pathlib import Path
          d=Path('dist')
          print('dist contents:')
          for p in sorted(d.glob('*')):
              print(' -', p)
          PY

      - name: Install built wheel (overwrite editable) and smoke test CLI
        run: |
          python - <<'PY'
          import glob, subprocess, sys
          files = glob.glob('dist/*.whl')
          if not files:
              raise SystemExit('No wheel found in dist/')
          wheel = files[0]
          print('Installing wheel:', wheel)
          subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--force-reinstall', '--no-deps', wheel])
          subprocess.check_call([sys.executable, '-m', 'cli.commands.cli_main', '--help'])
          PY
