name: Publish to PyPI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v0.1.41 or 0.1.41)'
        required: false
        type: string
      skip-testpypi:
        description: 'Skip TestPyPI publishing'
        required: false
        type: boolean
        default: false
      skip-pypi:
        description: 'Skip PyPI publishing (TestPyPI only)'
        required: false
        type: boolean
        default: false

jobs:
  publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tag detection

      - name: Detect or Create Tag
        id: detect-tag
        run: |
          # Determine the version/tag to use
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Triggered by tag push - use that tag
            TAG_NAME="${{ github.ref_name }}"
            echo "Using existing tag from push: $TAG_NAME"
            echo "tag_created=false" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.version }}" ]; then
            # Manual trigger with version input
            VERSION="${{ inputs.version }}"
            # Normalize to v-prefixed format
            if [[ "$VERSION" != v* ]]; then
              TAG_NAME="v$VERSION"
            else
              TAG_NAME="$VERSION"
            fi

            # Check if tag already exists
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME already exists"
              echo "tag_created=false" >> $GITHUB_OUTPUT
            else
              # Create new tag at current commit
              echo "Creating new tag: $TAG_NAME"
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
              git push origin "$TAG_NAME"
              echo "tag_created=true" >> $GITHUB_OUTPUT
            fi
          else
            # Try to detect from current commit
            TAG_NAME=$(git describe --exact-match --tags HEAD 2>/dev/null || echo "")
            if [ -z "$TAG_NAME" ]; then
              echo "Error: No version specified and not on a tag"
              exit 1
            fi
            echo "Detected tag from current commit: $TAG_NAME"
            echo "tag_created=false" >> $GITHUB_OUTPUT
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final tag: $TAG_NAME"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Publish package
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          TESTPYPI_TOKEN: ${{ secrets.TESTPYPI_API_TOKEN }}
        run: |
          # Build publish command
          CMD="./scripts/publish.sh"

          # Add version if specified
          if [ -n "${{ inputs.version }}" ]; then
            CMD="$CMD --version=${{ inputs.version }}"
          fi

          # Add skip flags if requested
          if [ "${{ inputs.skip-testpypi }}" = "true" ]; then
            CMD="$CMD --skip-testpypi"
          fi

          if [ "${{ inputs.skip-pypi }}" = "true" ]; then
            CMD="$CMD --skip-pypi"
          fi

          # Add token arguments
          CMD="$CMD --token-pypi=$PYPI_TOKEN --token-testpypi=$TESTPYPI_TOKEN"

          # Generate release notes to file
          CMD="$CMD --release-notes=RELEASE_NOTES.md"

          # Execute publish script
          echo "Running: $CMD"
          eval "$CMD"

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.detect-tag.outputs.tag_name }}
          name: Release ${{ steps.detect-tag.outputs.tag_name }}
          body_path: RELEASE_NOTES.md
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
