name: CLI Test Suite

on:
  # Only run full test suite on pull requests to avoid duplicate runs
  # (tests run once on PR, not again after merge to main)
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]  # Build packages when merging to main
  workflow_dispatch:  # Allow manual triggers for emergency testing

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read  # Required for shared-backend to monitor test job status
  packages: read  # Required for pulling Docker images from ghcr.io

  jobs:
  # Shared backend - provides Elite Services + Cloudflare Tunnel for all test platforms
  shared-backend:
    name: Shared Backend (Elite + Tunnel)
    runs-on: ubuntu-latest
    outputs:
      tunnel_url: ${{ steps.tunnel.outputs.tunnel-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python for CLI
        uses: actions/setup-python@v6
        with:
          python-version: '3.8'

      - name: Install local CLI (before Elite)
        run: |
          python -m pip install --upgrade pip
          pip install -e .
        working-directory: .

      - name: Start Elite Services
        uses: rediacc/elite/action@main
        with:
          keep-alive: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          REDIACC_SKIP_CLI_INSTALL: 'true'

      - name: Configure UDP Buffer Sizes
        run: |
          sudo sysctl -w net.core.rmem_max=7500000
          sudo sysctl -w net.core.wmem_max=7500000

      - name: Create Cloudflare Tunnel
        id: tunnel
        uses: rediacc/action-cloudflare-tunnel@v1
        with:
          url: http://localhost
          timeout: 60

      - name: Verify Tunnel
        run: |
          TUNNEL_URL="${{ steps.tunnel.outputs.tunnel-url }}"
          echo "Verifying tunnel at: $TUNNEL_URL"

          if [ -z "$TUNNEL_URL" ]; then
            echo "Failed to get tunnel URL"
            exit 1
          fi

          for i in {1..20}; do
            if curl -f "$TUNNEL_URL/api/health" 2>/dev/null; then
              echo "✓ Tunnel verified and accessible"
              exit 0
            fi
            echo "Attempt $i/20..."
            sleep 3
          done

          echo "Failed to verify tunnel"
          exit 1

      - name: Share Tunnel URL via Artifact
        run: |
          echo "${{ steps.tunnel.outputs.tunnel-url }}" > tunnel-url.txt
          echo "Tunnel URL saved to artifact: ${{ steps.tunnel.outputs.tunnel-url }}"

      - name: Upload Tunnel URL Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tunnel-url
          path: tunnel-url.txt
          retention-days: 1

      - name: Keep Backend Alive - Wait for test completion signals
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "=========================================="
          echo "Shared backend is ready!"
          echo "Tunnel URL: ${{ steps.tunnel.outputs.tunnel-url }}"
          echo "=========================================="
          echo ""
          echo "Waiting for test jobs to complete..."
          echo "Monitoring for completion artifacts from: linux, windows, macos"
          echo ""

          # Wait for completion artifacts from all test jobs
          TIMEOUT=7200  # 2 hours max wait
          ELAPSED=0

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Check for completion artifacts
            ARTIFACTS=$(gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" --jq '.artifacts[].name' 2>/dev/null || echo "")

            # Use grep -q to check existence (returns 0 if found, 1 if not)
            if echo "$ARTIFACTS" | grep -q "^test-complete-linux$"; then
              LINUX_DONE=1
            else
              LINUX_DONE=0
            fi

            if echo "$ARTIFACTS" | grep -q "^test-complete-windows$"; then
              WINDOWS_DONE=1
            else
              WINDOWS_DONE=0
            fi

            if echo "$ARTIFACTS" | grep -q "^test-complete-macos$"; then
              MACOS_DONE=1
            else
              MACOS_DONE=0
            fi

            echo "Completion signals received:"
            echo "  Linux: $([ "$LINUX_DONE" -eq 1 ] && echo '✓' || echo '⏳')"
            echo "  Windows: $([ "$WINDOWS_DONE" -eq 1 ] && echo '✓' || echo '⏳')"
            echo "  macOS: $([ "$MACOS_DONE" -eq 1 ] && echo '✓' || echo '⏳')"

            if [ "$LINUX_DONE" -eq 1 ] && [ "$WINDOWS_DONE" -eq 1 ] && [ "$MACOS_DONE" -eq 1 ]; then
              echo ""
              echo "✓ All test jobs completed!"
              break
            fi

            echo "  → Waiting... (${ELAPSED}s elapsed)"
            echo ""
            sleep 30
            ELAPSED=$((ELAPSED + 30))
          done

          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "⚠ Timeout reached after ${TIMEOUT}s - proceeding with cleanup"
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up shared backend resources..."
          TUNNEL_PID="${{ steps.tunnel.outputs.tunnel-pid }}"
          if [ -n "$TUNNEL_PID" ]; then
            kill $TUNNEL_PID 2>/dev/null || true
          fi
          docker ps -a --filter "name=rediacc-" --format "{{.Names}}" | xargs -r docker stop || true
          docker ps -a --filter "name=rediacc-" --format "{{.Names}}" | xargs -r docker rm || true
          echo "✓ Cleanup complete"

  # Consolidated matrix-based tests across OS and Python versions
  tests:
    name: Tests (${{ matrix.os }}, py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.8', '3.9', '3.10', '3.11', '3.13']
        include:
          - os: ubuntu-latest
            python: '3.8'
            integration: true
      

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Wait for and Download Tunnel URL
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: tunnel-url
        continue-on-error: true

      - name: Retry Download Tunnel URL
        if: steps.download-artifact.outcome == 'failure'
        run: |
          MAX_WAIT=1500
          ELAPSED=0
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            MINUTES=$((ELAPSED / 60))
            SECONDS=$((ELAPSED % 60))
            echo "Waiting for tunnel URL artifact... (${MINUTES}m ${SECONDS}s elapsed)"
            if gh run download ${{ github.run_id }} -n tunnel-url 2>/dev/null; then
              echo "✓ Tunnel URL artifact downloaded after ${MINUTES}m ${SECONDS}s"
              break
            fi
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo "::error::Timeout after ${MAX_WAIT}s waiting for backend to upload tunnel URL"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash

      - name: Load Tunnel URL
        id: tunnel
        run: |
          if [ ! -f tunnel-url.txt ]; then
            echo "::error::Tunnel URL artifact not found after retry attempts"
            exit 1
          fi
          TUNNEL_URL=$(cat tunnel-url.txt)
          echo "url=$TUNNEL_URL" >> $GITHUB_OUTPUT
          echo "Tunnel URL loaded: $TUNNEL_URL"
        shell: bash

      - name: Install Linux dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y xdg-utils rsync openssh-client desktop-file-utils xvfb python3-tk python3-dev

      - name: Setup headless display (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: pyvista/setup-headless-display-action@v3
        with:
          mesa3d-release: 24.3.0
          install-mesa3d-offscreen: true
          pyvista: false

      - name: Install Windows dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        run: choco install rsync openssh -y
        shell: pwsh

      - name: Install macOS dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install duti || true

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Run tests
        timeout-minutes: 20
        run: ./scripts/ci-test-runner.sh ${{ matrix.os }} ${{ matrix.python }} ${{ matrix.integration || 'false' }}
        env:
          SYSTEM_API_URL: ${{ steps.tunnel.outputs.url }}/api
          SYSTEM_ADMIN_EMAIL: admin@rediacc.io
          SYSTEM_ADMIN_PASSWORD: admin
          REDIACC_TEST_ACTIVATION_CODE: "111111"
          API_TIMEOUT: 60
        shell: bash

      - name: Upload CI Outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-outputs-${{ matrix.os }}-py${{ matrix.python }}
          path: ci-outputs/
          retention-days: 30

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.os }}-py${{ matrix.python }}
          path: test-screenshots/
          retention-days: 30
          if-no-files-found: ignore

      - name: Signal OS Completion
        if: ${{ always() && matrix.python == '3.13' }}
        run: echo "done" > test-complete.txt
        shell: bash

      - name: Upload Completion Signal (Linux)
        if: ${{ always() && matrix.python == '3.13' && matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-complete-linux
          path: test-complete.txt
          retention-days: 1

      - name: Upload Completion Signal (Windows)
        if: ${{ always() && matrix.python == '3.13' && matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-complete-windows
          path: test-complete.txt
          retention-days: 1

      - name: Upload Completion Signal (macOS)
        if: ${{ always() && matrix.python == '3.13' && matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-complete-macos
          path: test-complete.txt
          retention-days: 1

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -e ".[dev]"

      - name: Run checks
        run: |
          black --check src/ tests/ || true
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
          mypy src/cli --ignore-missing-imports || true

  # Test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [tests, code-quality, shared-backend]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Tests (matrix): ${{ needs.tests.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
          if [ "${{ needs.tests.result }}" != "success" ]; then
            echo "::error::One or more matrix test jobs failed"
            exit 1
          fi
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "::error::Code quality checks failed"
            exit 1
          fi
          echo "✓ All checks passed!"

  # Build distribution packages after merge to main
  build-packages:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for version detection

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine "packaging>=24.1"

      - name: Build packages
        run: |
          # Build uses development version from git describe
          python -m build

          # Verify packages were created
          ls -lah dist/

          # Check packages
          python -m twine check dist/*

      - name: Upload distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-packages-${{ github.sha }}
          path: dist/
          retention-days: 90
