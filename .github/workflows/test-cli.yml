name: CLI Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggers

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Linux tests - all Python versions sequentially with shared Elite backend
  test-linux:
    name: Linux Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Start Elite Services
        uses: rediacc/elite/action@main
        with:
          keep-alive: 'true'
        env:
          DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Setup Cloudflare Tunnel
        uses: AnimMouse/setup-cloudflared@v2

      - name: Start Cloudflare Tunnel
        id: tunnel
        run: |
          # Start cloudflared tunnel in background
          cloudflared tunnel --url http://localhost --logfile /tmp/cloudflared.log &
          TUNNEL_PID=$!
          echo "tunnel_pid=$TUNNEL_PID" >> $GITHUB_OUTPUT

          # Wait for tunnel to register connection
          echo "Waiting for tunnel to establish..."
          for i in {1..60}; do
            if grep -q 'Registered tunnel connection' /tmp/cloudflared.log 2>/dev/null; then
              TUNNEL_URL=$(grep -o 'https://[a-z0-9-]*\.trycloudflare\.com' /tmp/cloudflared.log | head -1)
              if [ -n "$TUNNEL_URL" ]; then
                echo "url=$TUNNEL_URL" >> $GITHUB_OUTPUT
                echo "✓ Tunnel URL: $TUNNEL_URL"
                break
              fi
            fi

            # Check for real API errors
            if grep '"level":"error"' /tmp/cloudflared.log 2>/dev/null | grep -v 'origincert' | grep -v 'origin certificate' | grep -q '.'; then
              echo "API error detected, waiting..."
            fi

            sleep 2
          done

      - name: Verify Tunnel
        run: |
          TUNNEL_URL="${{ steps.tunnel.outputs.url }}"
          echo "Verifying tunnel at: $TUNNEL_URL"

          if [ -z "$TUNNEL_URL" ]; then
            echo "Failed to get tunnel URL"
            cat /tmp/cloudflared.log
            exit 1
          fi

          for i in {1..20}; do
            if curl -f "$TUNNEL_URL/api/health" 2>/dev/null; then
              echo "✓ Tunnel verified and accessible"
              exit 0
            fi
            echo "Attempt $i/20..."
            sleep 3
          done

          echo "Failed to verify tunnel"
          cat /tmp/cloudflared.log
          exit 1

      - name: Test Python 3.8
        run: |
          sudo apt-get update && sudo apt-get install -y xdg-utils rsync openssh-client desktop-file-utils
          python3.8 -m pip install --upgrade pip setuptools wheel
          python3.8 -m pip install -e ".[test,dev]"
          python3.8 -m pytest tests/ -v --cov=cli --cov-report=xml --cov-report=html --junitxml=test-results-3.8/junit.xml --tb=short
        env:
          SYSTEM_API_URL: ${{ steps.tunnel.outputs.url }}/api
          SYSTEM_ADMIN_EMAIL: admin@rediacc.io
          SYSTEM_ADMIN_PASSWORD: admin
          REDIACC_TEST_ACTIVATION_CODE: "111111"
          API_TIMEOUT: 60

      - name: Integration Tests Python 3.8
        working-directory: tests
        run: ./run_integration_ci.sh
        env:
          SYSTEM_API_URL: ${{ steps.tunnel.outputs.url }}/api
          SYSTEM_ADMIN_EMAIL: admin@rediacc.io
          SYSTEM_ADMIN_PASSWORD: admin
          REDIACC_TEST_ACTIVATION_CODE: "111111"
          API_TIMEOUT: 60

      - name: Test Python 3.9
        run: |
          python3.9 -m pip install --upgrade pip setuptools wheel
          python3.9 -m pip install -e ".[test,dev]"
          python3.9 -m pytest tests/ -v --cov=cli --cov-report=xml --cov-report=html --junitxml=test-results-3.9/junit.xml --tb=short

      - name: Test Python 3.10
        run: |
          python3.10 -m pip install --upgrade pip setuptools wheel
          python3.10 -m pip install -e ".[test,dev]"
          python3.10 -m pytest tests/ -v --cov=cli --cov-report=xml --cov-report=html --junitxml=test-results-3.10/junit.xml --tb=short

      - name: Test Python 3.11
        run: |
          python3.11 -m pip install --upgrade pip setuptools wheel
          python3.11 -m pip install -e ".[test,dev]"
          python3.11 -m pytest tests/ -v --cov=cli --cov-report=xml --cov-report=html --junitxml=test-results-3.11/junit.xml --tb=short

      - name: Test Python 3.12
        run: |
          python3.12 -m pip install --upgrade pip setuptools wheel
          python3.12 -m pip install -e ".[test,dev]"
          python3.12 -m pytest tests/ -v --cov=cli --cov-report=xml --cov-report=html --junitxml=test-results-3.12/junit.xml --tb=short

      - name: Test Python 3.13
        run: |
          python3.13 -m pip install --upgrade pip setuptools wheel
          python3.13 -m pip install -e ".[test,dev]"
          python3.13 -m pytest tests/ -v --cov=cli --cov-report=xml --cov-report=html --junitxml=test-results-3.13/junit.xml --tb=short

      - name: Cleanup
        if: always()
        run: |
          kill ${{ steps.tunnel.outputs.tunnel_pid }} 2>/dev/null || true
          docker ps -a --filter "name=rediacc-" --format "{{.Names}}" | xargs -r docker stop || true
          docker ps -a --filter "name=rediacc-" --format "{{.Names}}" | xargs -r docker rm || true

  # Windows tests - sequential after Linux
  test-windows:
    name: Windows Tests
    runs-on: windows-latest
    needs: test-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies
        run: choco install rsync openssh -y
        shell: pwsh

      - name: Test Python 3.8
        run: |
          python3.8 -m pip install --upgrade pip setuptools wheel
          python3.8 -m pip install -e ".[test,dev]"
          python3.8 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short
        shell: bash

      - name: Test Python 3.9
        run: |
          python3.9 -m pip install --upgrade pip setuptools wheel
          python3.9 -m pip install -e ".[test,dev]"
          python3.9 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short
        shell: bash

      - name: Test Python 3.10
        run: |
          python3.10 -m pip install --upgrade pip setuptools wheel
          python3.10 -m pip install -e ".[test,dev]"
          python3.10 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short
        shell: bash

      - name: Test Python 3.11
        run: |
          python3.11 -m pip install --upgrade pip setuptools wheel
          python3.11 -m pip install -e ".[test,dev]"
          python3.11 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short
        shell: bash

      - name: Test Python 3.12
        run: |
          python3.12 -m pip install --upgrade pip setuptools wheel
          python3.12 -m pip install -e ".[test,dev]"
          python3.12 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short
        shell: bash

  # macOS tests - sequential after Windows
  test-macos:
    name: macOS Tests
    runs-on: macos-latest
    needs: test-windows

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies
        run: brew install duti || true

      - name: Test Python 3.8
        run: |
          python3.8 -m pip install --upgrade pip setuptools wheel
          python3.8 -m pip install -e ".[test,dev]"
          python3.8 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short

      - name: Test Python 3.9
        run: |
          python3.9 -m pip install --upgrade pip setuptools wheel
          python3.9 -m pip install -e ".[test,dev]"
          python3.9 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short

      - name: Test Python 3.10
        run: |
          python3.10 -m pip install --upgrade pip setuptools wheel
          python3.10 -m pip install -e ".[test,dev]"
          python3.10 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short

      - name: Test Python 3.11
        run: |
          python3.11 -m pip install --upgrade pip setuptools wheel
          python3.11 -m pip install -e ".[test,dev]"
          python3.11 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short

      - name: Test Python 3.12
        run: |
          python3.12 -m pip install --upgrade pip setuptools wheel
          python3.12 -m pip install -e ".[test,dev]"
          python3.12 -m pytest tests/ -v --cov=cli --cov-report=xml --tb=short

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -e ".[dev]"

      - name: Run checks
        run: |
          black --check src/ tests/ || true
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
          mypy src/cli --ignore-missing-imports || true

  # Test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos, code-quality]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Linux: ${{ needs.test-linux.result }}"
          echo "Windows: ${{ needs.test-windows.result }}"
          echo "macOS: ${{ needs.test-macos.result }}"

          if [ "${{ needs.test-linux.result }}" != "success" ]; then
            echo "::error::Linux tests failed"
            exit 1
          fi

          if [ "${{ needs.test-windows.result }}" != "success" ]; then
            echo "::error::Windows tests failed"
            exit 1
          fi

          if [ "${{ needs.test-macos.result }}" != "success" ]; then
            echo "::error::macOS tests failed"
            exit 1
          fi

          echo "✓ All tests passed!"
