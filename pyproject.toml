[build-system]
requires = ["setuptools>=69.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rediacc"
dynamic = ["version"]
description = "Infrastructure protection platform with 100-second recovery. Instant cloning, time-travel recovery, and 99.99% storage reduction for disaster prevention."
readme = "README_PYPI.md"
license = {text = "MIT"}
authors = [
    {name = "Rediacc Team", email = "info@rediacc.com"}
]
maintainers = [
    {name = "Rediacc Team", email = "info@rediacc.com"}
]
requires-python = ">=3.8"
dependencies = [
    "cryptography>=41.0.0",
    "requests>=2.31.0",
    "pyotp>=2.9.0",
]
keywords = [
    "rediacc",
    "disaster-recovery",
    "backup",
    "ai-safety",
    "infrastructure-protection",
    "ransomware-protection",
    "time-travel-recovery",
    "zero-cost-backup",
    "devops",
    "cloud-failover",
    "database-cloning",
    "snapshot",
    "smart-deduplication",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Environment :: Console",
]

[project.urls]
Homepage = "https://rediacc.com"
Documentation = "https://www.rediacc.com/docs"
Repository = "https://github.com/rediacc/cli"
"Bug Tracker" = "https://github.com/rediacc/cli/issues"

[project.optional-dependencies]
# Note: GUI support requires tkinter which is part of Python standard library
# On some Linux distributions, you may need to install python3-tk package
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "build>=0.10",
    "twine>=4.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pyyaml>=6.0",
    "playwright>=1.40.0",  # For protocol testing
    "mss>=9.0.0",  # For cross-platform screenshots in CI
]

[project.scripts]
rediacc = "cli.commands.cli_main:main"
rediacc-sync = "cli.commands.sync_main:main"
rediacc-term = "cli.commands.term_main:main"
rediacc-vscode = "cli.commands.vscode_main:main"
rediacc-plugin = "cli.commands.plugin_main:main"
rediacc-workflow = "cli.commands.workflow_main:main"
rediacc-desktop = "cli.gui.main:main"
rediacc-gui = "cli.gui.main:main"

# Multiple hook trigger entry points for automatic setup
[project.entry-points."setuptools.installation"]
# Standard setuptools installation hooks
post_install = "cli.setup_hooks:post_install"
post_update = "cli.setup_hooks:post_update"

[project.entry-points."pip_install_hooks"]
# Pip-specific installation hooks (if supported)
rediacc_post_install = "cli.setup_hooks:post_install"

[project.entry-points."rediacc.setup"]
# Custom entry points for manual setup triggering
post_install = "cli.setup_hooks:post_install"
setup = "cli.setup_hooks:post_install"
repair = "cli.setup_hooks:post_install"

[project.entry-points."console_scripts_hooks"]
# Hook that runs when console scripts are installed
rediacc_setup = "cli.setup_hooks:post_install"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["cli", "cli.commands", "cli.core", "cli.gui", "cli.assets", "cli.config"]
include-package-data = true
zip-safe = false

# Enhanced command class configuration for automatic hook triggers
[tool.setuptools.cmdclass]
# Custom commands that trigger setup hooks
install = "cli._setup_cmds.PostInstallCommand"
develop = "cli._setup_cmds.PostDevelopCommand"
egg_info = "cli._setup_cmds.PostEggInfoCommand"

[tool.setuptools.dynamic]
version = {attr = "cli._version.__version__"}

[tool.setuptools.package-data]
cli = [
    "assets/*",
    "config/*.json",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",  # Show summary of all test outcomes
    "--strict-markers",  # Ensure all markers are defined
    "--strict-config",  # Ensure config is valid
    "--showlocals",  # Show local variables in tracebacks
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "protocol: marks tests for protocol handler functionality",
    "gui: marks tests for GUI functionality",
    "linux: marks tests that only run on Linux",
    "macos: marks tests that only run on macOS",
    "windows: marks tests that only run on Windows",
]
filterwarnings = [
    "error",  # Treat warnings as errors
    "ignore::DeprecationWarning",  # Ignore deprecation warnings
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["cli"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true