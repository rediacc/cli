name: "VAULT_ADVANCED_TEST"
description: "Test advanced vault operations for all entity types"
executor: "rediacc-cli.py"

# Tests remaining vault update endpoints

tests:
  # Create entities for vault testing
  - name: "create_vault_adv_team"
    command: ["CreateTeam"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      teamVault: '{"initial": "value"}'
    expect:
      success: true
  
  - name: "create_vault_adv_region"
    command: ["CreateRegion"]
    args:
      regionName: "VaultAdvRegion-${TIMESTAMP}"
      regionVault: '{"initial": "value"}'
    expect:
      success: true
  
  - name: "create_vault_adv_bridge"
    command: ["CreateBridge"]
    args:
      regionName: "VaultAdvRegion-${TIMESTAMP}"
      bridgeName: "VaultAdvBridge-${TIMESTAMP}"
      bridgeVault: '{"initial": "value"}'
    expect:
      success: true
  
  - name: "create_vault_adv_machine"
    command: ["CreateMachine"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      bridgeName: "VaultAdvBridge-${TIMESTAMP}"
      machineName: "VaultAdvMachine-${TIMESTAMP}"
      machineVault: '{"ip": "10.0.0.1", "initial": "value"}'
    expect:
      success: true
  
  - name: "create_vault_adv_storage"
    command: ["CreateStorage"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      storageName: "VaultAdvStorage-${TIMESTAMP}"
      storageVault: '{"type": "s3", "initial": "value"}'
    expect:
      success: true
  
  - name: "create_vault_adv_schedule"
    command: ["CreateSchedule"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      scheduleName: "VaultAdvSchedule-${TIMESTAMP}"
      scheduleVault: '{"cron": "0 * * * *", "initial": "value"}'
    expect:
      success: true
  
  - name: "create_vault_adv_repository"
    command: ["CreateRepository"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      repoName: "VaultAdvRepo-${TIMESTAMP}"
      repoVault: '{"type": "git", "initial": "value"}'
    expect:
      success: true
  
  # Update all vaults with version tracking
  - name: "update_bridge_vault_versioned"
    command: ["UpdateBridgeVault"]
    args:
      regionName: "VaultAdvRegion-${TIMESTAMP}"
      bridgeName: "VaultAdvBridge-${TIMESTAMP}"
      bridgeVault: '{"updated": "true", "version": 2, "timestamp": "${TIMESTAMP}"}'
      vaultVersion: 1
    expect:
      success: true
  
  - name: "update_machine_vault_versioned"
    command: ["UpdateMachineVault"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      machineName: "VaultAdvMachine-${TIMESTAMP}"
      machineVault: '{"ip": "10.0.0.2", "updated": "true", "version": 2}'
      vaultVersion: 1
    expect:
      success: true
  
  - name: "update_repository_vault_versioned"
    command: ["UpdateRepositoryVault"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      repoName: "VaultAdvRepo-${TIMESTAMP}"
      repoVault: '{"type": "git", "url": "updated.git", "version": 2}'
      vaultVersion: 1
    expect:
      success: true
  
  - name: "update_schedule_vault_versioned"
    command: ["UpdateScheduleVault"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      scheduleName: "VaultAdvSchedule-${TIMESTAMP}"
      scheduleVault: '{"cron": "0 */2 * * *", "updated": "true", "version": 2}'
      vaultVersion: 1
    expect:
      success: true
  
  - name: "update_storage_vault_versioned"
    command: ["UpdateStorageVault"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      storageName: "VaultAdvStorage-${TIMESTAMP}"
      storageVault: '{"type": "s3", "bucket": "updated", "version": 2}'
      vaultVersion: 1
    expect:
      success: true
  
  # Clean up
  - name: "delete_vault_adv_repository"
    command: ["DeleteRepository"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      repoName: "VaultAdvRepo-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_vault_adv_schedule"
    command: ["DeleteSchedule"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      scheduleName: "VaultAdvSchedule-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_vault_adv_storage"
    command: ["DeleteStorage"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      storageName: "VaultAdvStorage-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_vault_adv_machine"
    command: ["DeleteMachine"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
      machineName: "VaultAdvMachine-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_vault_adv_bridge"
    command: ["DeleteBridge"]
    args:
      regionName: "VaultAdvRegion-${TIMESTAMP}"
      bridgeName: "VaultAdvBridge-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_vault_adv_region"
    command: ["DeleteRegion"]
    args:
      regionName: "VaultAdvRegion-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_vault_adv_team"
    command: ["DeleteTeam"]
    args:
      teamName: "VaultAdvTeam-${TIMESTAMP}"
    expect:
      success: true