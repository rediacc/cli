name: DISTRIBUTED_STORAGE_TEST
description: Test distributed storage cluster, pool, and RBD operations
executor: "commands/cli_main.py"
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: DSTestCompany-${TIMESTAMP}
    email: dstest-${TIMESTAMP}@test.com
    password: Test@Pass123!
    subscriptionPlan: ELITE
  expect:
    success: true
- name: activate_account
  command:
  - ActivateUserAccount
  args:
    email: dstest-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login
  command:
  - CreateAuthenticationRequest
  args:
    email: dstest-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
- name: create_test_region
  command:
  - CreateRegion
  args:
    regionName: DSRegion-${TIMESTAMP}
    regionVault: '{"location": "test"}'
  expect:
    success: true
- name: create_test_bridge
  command:
  - CreateBridge
  args:
    regionName: DSRegion-${TIMESTAMP}
    bridgeName: DSBridge-${TIMESTAMP}
    bridgeVault: '{"type": "storage"}'
  expect:
    success: true
- name: create_ds_team
  command:
  - CreateTeam
  args:
    teamName: DSTeam-${TIMESTAMP}
    teamVault: '{"storage": "enabled"}'
  expect:
    success: true
- name: create_test_machine
  command:
  - CreateMachine
  args:
    teamName: DSTeam-${TIMESTAMP}
    bridgeName: DSBridge-${TIMESTAMP}
    machineName: DSMachine-${TIMESTAMP}
    machineVault: '{"ip": "10.0.0.100", "user": "root", "datastore": "/var/lib/rediacc"}'
  expect:
    success: true
tests:
- name: create_ds_cluster
  command:
  - CreateDistributedStorageCluster
  args:
    clusterName: DSCluster-${TIMESTAMP}
    clusterVault: '{"type": "ceph", "monitors": "10.0.0.1:6789", "auth": "cephx"}'
  expect:
    success: true
- name: get_ds_clusters
  command:
  - GetDistributedStorageClusters
  expect:
    success: true
    output_contains: DSCluster-${TIMESTAMP}
- name: create_ds_pool
  command:
  - CreateDistributedStoragePool
  args:
    clusterName: DSCluster-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    poolVault: '{"size": "10GB", "replicas": 3}'
  expect:
    success: true
- name: get_ds_pools
  command:
  - GetDistributedStoragePools
  args:
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
    output_contains: DSPool-${TIMESTAMP}
- name: create_rbd_image
  command:
  - CreateDistributedStorageRbdImage
  args:
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
    imageName: DSImage-${TIMESTAMP}
    machineName: DSMachine-${TIMESTAMP}
    imageVault: '{"size": "1GB", "features": "layering"}'
  expect:
    success: true
- name: get_rbd_images
  command:
  - GetDistributedStorageRbdImages
  args:
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
    output_contains: DSImage-${TIMESTAMP}
- name: create_rbd_snapshot
  command:
  - CreateDistributedStorageRbdSnapshot
  args:
    imageName: DSImage-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
    snapshotName: DSSnapshot-${TIMESTAMP}
    snapshotVault: '{"description": "Test snapshot"}'
  expect:
    success: true
- name: get_rbd_snapshots
  command:
  - GetDistributedStorageRbdSnapshots
  args:
    imageName: DSImage-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
    output_contains: DSSnapshot-${TIMESTAMP}
- name: create_rbd_clone
  command:
  - CreateDistributedStorageRbdClone
  args:
    snapshotName: DSSnapshot-${TIMESTAMP}
    imageName: DSImage-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
    cloneName: DSClone-${TIMESTAMP}
    cloneVault: '{"parent": "DSImage-${TIMESTAMP}"}'
  expect:
    success: true
- name: get_rbd_clones
  command:
  - GetDistributedStorageRbdClones
  args:
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
    output_contains: DSClone-${TIMESTAMP}
- name: update_cluster_vault
  command:
  - UpdateDistributedStorageClusterVault
  args:
    clusterName: DSCluster-${TIMESTAMP}
    clusterVault: '{"type": "ceph", "monitors": "10.0.0.1:6789,10.0.0.2:6789", "auth":
      "cephx", "updated": "true"}'
    vaultVersion: 1
  expect:
    success: true
- name: update_pool_vault
  command:
  - UpdateDistributedStoragePoolVault
  args:
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
    poolVault: '{"size": "20GB", "replicas": 3, "updated": "true"}'
    vaultVersion: 1
  expect:
    success: true
- name: delete_rbd_clone
  command:
  - DeleteDistributedStorageRbdClone
  args:
    cloneName: DSClone-${TIMESTAMP}
    snapshotName: DSSnapshot-${TIMESTAMP}
    imageName: DSImage-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_rbd_snapshot
  command:
  - DeleteDistributedStorageRbdSnapshot
  args:
    snapshotName: DSSnapshot-${TIMESTAMP}
    imageName: DSImage-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_rbd_image
  command:
  - DeleteDistributedStorageRbdImage
  args:
    imageName: DSImage-${TIMESTAMP}
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_ds_pool
  command:
  - DeleteDistributedStoragePool
  args:
    poolName: DSPool-${TIMESTAMP}
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_ds_cluster
  command:
  - DeleteDistributedStorageCluster
  args:
    clusterName: DSCluster-${TIMESTAMP}
  expect:
    success: true
- name: delete_test_machine
  command:
  - DeleteMachine
  args:
    teamName: DSTeam-${TIMESTAMP}
    machineName: DSMachine-${TIMESTAMP}
  expect:
    success: true
- name: delete_ds_team
  command:
  - DeleteTeam
  args:
    teamName: DSTeam-${TIMESTAMP}
  expect:
    success: true
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
