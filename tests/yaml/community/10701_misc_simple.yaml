name: "MISC_SIMPLE_TEST"
description: "Simplified test for miscellaneous endpoints"
executor: "rediacc-cli.py"

# Setup authentication with test user
setup:
  - name: "create_test_company"
    command: ["CreateNewCompany"]
    args:
      companyName: "MiscTestCompany-${TIMESTAMP}"
      email: "misctest-${TIMESTAMP}@test.com"
      password: "Test@Pass123!"
    expect:
      success: true
  
  - name: "activate_account"
    command: ["ActivateUserAccount"]
    args:
      email: "misctest-${TIMESTAMP}@test.com"
      activationCode: "111111"
      password: "Test@Pass123!"
    expect:
      success: true
  
  - name: "login_admin"
    command: ["login"]
    args:
      email: "misctest-${TIMESTAMP}@test.com"
      password: "Test@Pass123!"
    expect:
      success: true
    chain_export:
      admin_email: "misctest-${TIMESTAMP}@test.com"

# Tests miscellaneous endpoints

tests:
  # Check if email is registered
  - name: "check_registered"
    command: ["IsRegistered"]
    args:
      userName: "${chain.admin_email}"
    expect:
      success: true
      output_contains: "true"
  
  # Get auth status
  - name: "get_auth_status"
    command: ["GetRequestAuthenticationStatus"]
    expect:
      success: true
  
  # Create infrastructure for other tests
  - name: "create_misc_region"
    command: ["CreateRegion"]
    args:
      regionName: "MiscRegion-${TIMESTAMP}"
      regionVault: '{}'
    expect:
      success: true
  
  - name: "create_misc_bridge"
    command: ["CreateBridge"]
    args:
      regionName: "MiscRegion-${TIMESTAMP}"
      bridgeName: "MiscBridge-${TIMESTAMP}"
      bridgeVault: '{"token": "test123"}'
    expect:
      success: true
  
  # Reset bridge auth
  - name: "reset_bridge_auth"
    command: ["ResetBridgeAuthorization"]
    args:
      bridgeName: "MiscBridge-${TIMESTAMP}"
    expect:
      success: true
  
  # Create team for repository testing
  - name: "create_misc_team"
    command: ["CreateTeam"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
      teamVault: '{}'
    expect:
      success: true
  
  - name: "create_misc_machine"
    command: ["CreateMachine"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
      bridgeName: "MiscBridge-${TIMESTAMP}"
      machineName: "MiscMachine-${TIMESTAMP}"
      machineVault: '{"ip": "10.0.0.1"}'
    expect:
      success: true
  
  - name: "create_misc_repository"
    command: ["CreateRepository"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
      repoName: "MiscRepo-${TIMESTAMP}"
      repoVault: '{}'
    expect:
      success: true
  
  # Update repository name
  - name: "rename_repository"
    command: ["UpdateRepositoryName"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
      currentRepoName: "MiscRepo-${TIMESTAMP}"
      newRepoName: "RenamedRepo-${TIMESTAMP}"
    expect:
      success: true
  
  # Clean up
  - name: "delete_misc_repository"
    command: ["DeleteRepository"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
      repoName: "RenamedRepo-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_misc_machine"
    command: ["DeleteMachine"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
      machineName: "MiscMachine-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_misc_bridge"
    command: ["DeleteBridge"]
    args:
      regionName: "MiscRegion-${TIMESTAMP}"
      bridgeName: "MiscBridge-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_misc_region"
    command: ["DeleteRegion"]
    args:
      regionName: "MiscRegion-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_misc_team"
    command: ["DeleteTeam"]
    args:
      teamName: "MiscTeam-${TIMESTAMP}"
    expect:
      success: true