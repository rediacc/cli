name: PERMISSION_MANAGEMENT_TEST
description: Test permission group and permission management operations
executor: "commands/cli.py"
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: PermMgmtCompany-${TIMESTAMP}
    email: permmgmt-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
    subscriptionPlan: PREMIUM
  expect:
    success: true
- name: activate_admin_account
  command:
  - ActivateUserAccount
  args:
    email: permmgmt-admin-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login_as_admin
  command:
  - CreateAuthenticationRequest
  args:
    email: permmgmt-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
tests:
- name: create_custom_permission_group
  command:
  - CreatePermissionGroup
  args:
    permissionGroupName: CustomGroup-${TIMESTAMP}
  expect:
    success: true
  description: Create a new permission group
- name: add_permission_to_group
  command:
  - CreatePermissionInGroup
  args:
    permissionGroupName: CustomGroup-${TIMESTAMP}
    permissionName: GetTeamMachines
  expect:
    success: true
  description: Add GetTeamMachines permission to custom group
- name: add_another_permission
  command:
  - CreatePermissionInGroup
  args:
    permissionGroupName: CustomGroup-${TIMESTAMP}
    permissionName: GetTeamRepositories
  expect:
    success: true
  description: Add GetTeamRepositories permission to custom group
- name: get_permission_group_details
  command:
  - GetPermissionGroupDetails
  args:
    permissionGroupName: CustomGroup-${TIMESTAMP}
  expect:
    success: true
    output_contains:
    - GetTeamMachines
    - GetTeamRepositories
  description: Verify permissions were added to group
- name: create_test_user
  command:
  - CreateNewUser
  args:
    newUserEmail: permtestuser-${TIMESTAMP}@test.com
    newUserHash: '0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5'
  expect:
    success: true
  description: Create user for permission assignment testing
- name: assign_custom_permissions
  command:
  - UpdateUserAssignedPermissions
  args:
    userEmail: permtestuser-${TIMESTAMP}@test.com
    permissionGroupName: CustomGroup-${TIMESTAMP}
  expect:
    success: true
  description: Assign custom permission group to user
- name: remove_permission_from_group
  command:
  - DeletePermissionFromGroup
  args:
    permissionGroupName: CustomGroup-${TIMESTAMP}
    permissionName: GetTeamRepositories
  expect:
    success: true
  description: Remove a permission from the group
- name: create_second_admin
  command:
  - CreateNewUser
  args:
    newUserEmail: perm-admin2-${TIMESTAMP}@test.com
    newUserHash: '0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5'
  expect:
    success: true
- name: activate_second_admin
  command:
  - ActivateUserAccount
  args:
    email: perm-admin2-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass456!
  expect:
    success: true
  description: Activate second admin account
- name: promote_second_admin
  command:
  - UpdateUserAssignedPermissions
  args:
    userEmail: perm-admin2-${TIMESTAMP}@test.com
    permissionGroupName: Administrators
  expect:
    success: true
  description: Promote second user to admin
- name: downgrade_first_admin
  command:
  - UpdateUserAssignedPermissions
  args:
    userEmail: permmgmt-admin-${TIMESTAMP}@test.com
    permissionGroupName: Users
  expect:
    success: true
  description: Downgrade first admin to regular user
- name: remove_user_from_custom_group
  command:
  - UpdateUserAssignedPermissions
  args:
    userEmail: permtestuser-${TIMESTAMP}@test.com
    permissionGroupName: Users
  expect:
    success: true
  description: Move user from custom group to Users group
- name: delete_empty_group
  command:
  - DeletePermissionGroup
  args:
    permissionGroupName: CustomGroup-${TIMESTAMP}
  expect:
    success: true
  description: Delete the now-empty permission group
- name: verify_group_deleted
  command:
  - GetCompanyPermissionGroups
  expect:
    success: true
    output_not_contains:
    - CustomGroup-${TIMESTAMP}
  description: Verify permission group was deleted
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
