name: USER_MANAGEMENT_TEST
description: Test user management operations - create, update, deactivate users
executor: rediacc-cli.py
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: UserMgmtCompany-${TIMESTAMP}
    email: usermgmt-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
    subscriptionPlan: PREMIUM
  expect:
    success: true
- name: activate_admin_account
  command:
  - ActivateUserAccount
  args:
    email: usermgmt-admin-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login_as_admin
  command:
  - CreateAuthenticationRequest
  args:
    email: usermgmt-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
tests:
- name: create_new_user
  command:
  - CreateNewUser
  args:
    newUserEmail: testuser1-${TIMESTAMP}@test.com
    newUserHash: '0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5'
  expect:
    success: true
  description: Create a new user in the company
  chain:
  - key: test_user_email
    from: result[0].UserEmail
- name: update_user_email
  command:
  - UpdateUserEmail
  args:
    currentUserEmail: testuser1-${TIMESTAMP}@test.com
    newUserEmail: testuser1-updated-${TIMESTAMP}@test.com
  expect:
    success: true
  description: Update user's email address
  chain:
  - key: updated_user_email
    from: result[0].UserEmail
- name: create_tfa_test_user
  command:
  - CreateNewUser
  args:
    newUserEmail: tfauser-${TIMESTAMP}@test.com
    newUserHash: '0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5'
  expect:
    success: true
  description: Create user for TFA testing
- name: skip_tfa_enable
  command:
  - GetCompanyUsers
  args: {}
  expect:
    success: true
  description: Skip TFA enable test - requires user to be logged in
- name: skip_tfa_disable
  command:
  - GetCompanyUsers
  args: {}
  expect:
    success: true
  description: Skip TFA disable test - requires user to be logged in
- name: skip_deactivate_user
  command:
  - GetCompanyUsers
  args: {}
  expect:
    success: true
  description: Skip deactivate test - would deactivate current user
- name: create_second_admin
  command:
  - CreateNewUser
  args:
    newUserEmail: admin2-${TIMESTAMP}@test.com
    newUserHash: '0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5'
  expect:
    success: true
  description: Create a second admin user
- name: skip_activate_second_admin
  command:
  - GetCompanyUsers
  args: {}
  expect:
    success: true
  description: Skip activation - would need auto-generated code
- name: list_company_users
  command:
  - GetCompanyUsers
  expect:
    success: true
    output_contains:
    - usermgmt-admin-${TIMESTAMP}@test.com
  description: Verify all users were created successfully
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
