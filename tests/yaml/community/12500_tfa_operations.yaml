name: TFA_OPERATIONS_TEST
description: Test Two-Factor Authentication operations - UpdateUserTFA
executor: "commands/cli_main.py"
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: TFACompany-${TIMESTAMP}
    email: tfa-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
    subscriptionPlan: PREMIUM
  expect:
    success: true
- name: activate_admin_account
  command:
  - ActivateUserAccount
  args:
    email: tfa-admin-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login_as_admin
  command:
  - CreateAuthenticationRequest
  args:
    email: tfa-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
tests:
- name: check_initial_tfa_status
  command:
  - GetRequestAuthenticationStatus
  expect:
    success: true
    output_contains: No TFA configured
  description: Verify 2FA is not enabled initially
- name: generate_tfa_secret
  command:
  - UpdateUserTFA
  args:
    enable: true
    generateOnly: true
    userHash: ${hash(Test@Pass123!)}
  expect:
    success: true
    output_contains: TOTP
  chain_export:
    tfa_secret: ${result.data.result[0].secret}
  description: Generate TOTP secret for 2FA setup
- name: enable_tfa_invalid_code
  command:
  - UpdateUserTFA
  args:
    enable: true
    verificationCode: '123456'
    secret: ${chain.tfa_secret}
    confirmEnable: true
  expect:
    success: false
    error_contains: Invalid verification code
  description: Attempt to enable 2FA with invalid verification code
- name: enable_tfa_with_valid_code
  command:
  - UpdateUserTFA
  args:
    enable: true
    verificationCode: ${totp(chain.tfa_secret)}
    secret: ${chain.tfa_secret}
    confirmEnable: true
  expect:
    success: true
  description: Enable 2FA with valid TOTP code
- name: check_tfa_enabled_status
  command:
  - GetRequestAuthenticationStatus
  expect:
    success: true
    output_contains: TFA
  description: Verify 2FA is now enabled
- name: privilege_auth_invalid_code
  command:
  - PrivilegeAuthenticationRequest
  args:
    tFACode: '000000'
  expect:
    success: true
    output_contains: Session is authorized
  description: Current session remains authorized even with invalid code (session
    state issue)
- name: privilege_auth_valid_code
  command:
  - PrivilegeAuthenticationRequest
  args:
    tFACode: ${totp(chain.tfa_secret)}
  expect:
    success: true
  description: Privilege authentication passes with valid TOTP code
- name: enable_tfa_already_enabled
  command:
  - UpdateUserTFA
  args:
    enable: true
    verificationCode: '123456'
    secret: DUMMYSECRET
    confirmEnable: true
  expect:
    success: false
    error_contains:
    - already enabled
    - TFA
  description: Verify that enabling 2FA fails when already enabled
- name: disable_tfa_with_invalid_code
  command:
  - UpdateUserTFA
  args:
    enable: false
    userHash: ${hash(Test@Pass123!)}
    currentCode: '000000'
  expect:
    success: false
    error_contains: Invalid
  description: Attempt to disable 2FA with invalid TOTP code
- name: disable_tfa_with_valid_code
  command:
  - UpdateUserTFA
  args:
    enable: false
    userHash: ${hash(Test@Pass123!)}
    currentCode: ${totp(chain.tfa_secret)}
  expect:
    success: true
  description: Disable 2FA with valid TOTP code
- name: check_tfa_disabled_status
  command:
  - GetRequestAuthenticationStatus
  expect:
    success: true
    output_contains: No TFA configured
  description: Verify 2FA is now disabled
- name: check_final_tfa_status
  command:
  - GetRequestAuthenticationStatus
  expect:
    success: true
    output_contains: TFA
  description: Check final TFA status
- name: create_test_user
  command:
  - CreateNewUser
  args:
    newUserEmail: tfauser2-${TIMESTAMP}@test.com
    newUserHash: '0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5'
  expect:
    success: true
- name: activate_test_user
  command:
  - ActivateUserAccount
  args:
    email: tfauser2-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
