name: QUEUE_OPERATIONS_ADVANCED_TEST
description: Test advanced queue operations including cancel, retry, trace, and completion
executor: "commands/cli.py"
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: QueueAdvTestCompany-${TIMESTAMP}
    email: queueadv-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
- name: activate_account
  command:
  - ActivateUserAccount
  args:
    email: queueadv-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login_admin
  command:
  - CreateAuthenticationRequest
  args:
    email: queueadv-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
- name: create_test_team
  command:
  - CreateTeam
  args:
    teamName: QueueAdvTestTeam-${TIMESTAMP}
    teamVault: '{}'
  expect:
    success: true
- name: create_test_region
  command:
  - CreateRegion
  args:
    regionName: QueueAdvTestRegion-${TIMESTAMP}
    regionVault: '{}'
  expect:
    success: true
- name: create_test_bridge
  command:
  - CreateBridge
  args:
    regionName: QueueAdvTestRegion-${TIMESTAMP}
    bridgeName: QueueAdvTestBridge-${TIMESTAMP}
    bridgeVault: '{}'
  expect:
    success: true
- name: create_test_machine
  command:
  - CreateMachine
  args:
    teamName: QueueAdvTestTeam-${TIMESTAMP}
    bridgeName: QueueAdvTestBridge-${TIMESTAMP}
    machineName: QueueAdvTestMachine-${TIMESTAMP}
    machineVault: '{"ip": "10.0.0.1"}'
  expect:
    success: true
tests:
- name: create_queue_for_testing
  command:
  - CreateQueueItem
  args:
    teamName: QueueAdvTestTeam-${TIMESTAMP}
    machineName: QueueAdvTestMachine-${TIMESTAMP}
    bridgeName: QueueAdvTestBridge-${TIMESTAMP}
    queueVault: '{"function": "test", "command": "echo test", "timeout": 300}'
    priority: 1
  expect:
    success: true
  description: Create queue item for testing operations
  chain_export:
    taskId: ${result.data.result[0].taskId}
- name: get_queue_items_for_task_id
  command:
  - GetTeamQueueItems
  args:
    teamName: QueueAdvTestTeam-${TIMESTAMP}
  expect:
    success: true
  description: Get queue items to find task ID
- name: update_queue_response
  command:
  - UpdateQueueItemResponse
  args:
    taskId: ${chain.taskId}
    responseVault: '{"response": "Processing started...", "statusCode": 1}'
  expect:
    success: false
    error_contains: Only bridge tokens can update queue item responses
  description: Attempt to update queue item response (requires bridge token)
- name: get_queue_trace
  command:
  - GetQueueItemTrace
  args:
    taskId: ${chain.taskId}
  expect:
    success: true
  description: Get trace for queue item
- name: retry_queue_item
  command:
  - RetryFailedQueueItem
  args:
    taskId: ${chain.taskId}
  expect:
    success: false
    error_contains: Can only retry failed queue items
  description: Attempt to retry queue item (only works on FAILED status)
- name: cancel_queue_item
  command:
  - CancelQueueItem
  args:
    taskId: ${chain.taskId}
  expect:
    success: true
  description: Cancel a queue item
- name: complete_queue_item
  command:
  - UpdateQueueItemToCompleted
  args:
    taskId: ${chain.taskId}
    finalVault: '{"response": "Task completed successfully", "statusCode": 0}'
  expect:
    success: false
    error_contains: Only bridge tokens can complete queue items
  description: Attempt to complete queue item (requires bridge token)
- name: delete_queue_item
  command:
  - DeleteQueueItem
  args:
    taskId: ${chain.taskId}
  expect:
    success: true
  description: Delete a queue item
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
