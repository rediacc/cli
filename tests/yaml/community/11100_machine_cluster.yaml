name: MACHINE_CLUSTER_TEST
description: Test machine cluster assignment and management
executor: rediacc-cli.py
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: MCTestCompany-${TIMESTAMP}
    email: mctest-${TIMESTAMP}@test.com
    password: Test@Pass123!
    subscriptionPlan: ELITE
  expect:
    success: true
- name: activate_account
  command:
  - ActivateUserAccount
  args:
    email: mctest-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login
  command:
  - CreateAuthenticationRequest
  args:
    email: mctest-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
tests:
- name: create_cluster_team
  command:
  - CreateTeam
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    teamVault: '{"cluster": "enabled"}'
  expect:
    success: true
- name: create_cluster_region
  command:
  - CreateRegion
  args:
    regionName: ClusterRegion-${TIMESTAMP}
    regionVault: '{"type": "cluster"}'
  expect:
    success: true
- name: create_cluster_bridge
  command:
  - CreateBridge
  args:
    regionName: ClusterRegion-${TIMESTAMP}
    bridgeName: ClusterBridge-${TIMESTAMP}
    bridgeVault: '{"cluster": "ready"}'
  expect:
    success: true
- name: create_cluster_machine1
  command:
  - CreateMachine
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    bridgeName: ClusterBridge-${TIMESTAMP}
    machineName: ClusterNode1-${TIMESTAMP}
    machineVault: '{"ip": "10.0.1.1", "role": "master"}'
  expect:
    success: true
- name: create_cluster_machine2
  command:
  - CreateMachine
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    bridgeName: ClusterBridge-${TIMESTAMP}
    machineName: ClusterNode2-${TIMESTAMP}
    machineVault: '{"ip": "10.0.1.2", "role": "worker"}'
  expect:
    success: true
- name: create_storage_cluster_for_machines
  command:
  - CreateDistributedStorageCluster
  args:
    clusterName: MachineCluster-${TIMESTAMP}
    clusterVault: '{"type": "kubernetes", "version": "1.28"}'
  expect:
    success: true
- name: assign_machine_to_cluster
  command:
  - UpdateMachineClusterAssignment
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    machineName: ClusterNode1-${TIMESTAMP}
    clusterName: MachineCluster-${TIMESTAMP}
  expect:
    success: true
- name: update_machine_distributed_storage
  command:
  - UpdateMachineDistributedStorage
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    machineName: ClusterNode2-${TIMESTAMP}
    clusterName: MachineCluster-${TIMESTAMP}
  expect:
    success: true
- name: get_cluster_machines
  command:
  - GetDistributedStorageClusterMachines
  args:
    clusterName: MachineCluster-${TIMESTAMP}
  expect:
    success: true
    output_contains: ClusterNode1-${TIMESTAMP}
- name: get_available_for_clone
  command:
  - GetAvailableMachinesForClone
  args:
    teamName: ClusterTeam-${TIMESTAMP}
  expect:
    success: true
- name: remove_machine_from_cluster
  command:
  - UpdateMachineClusterRemoval
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    machineName: ClusterNode1-${TIMESTAMP}
  expect:
    success: true
- name: delete_cluster_machines
  command:
  - DeleteMachine
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    machineName: ClusterNode2-${TIMESTAMP}
  expect:
    success: true
- name: delete_cluster_machine1
  command:
  - DeleteMachine
  args:
    teamName: ClusterTeam-${TIMESTAMP}
    machineName: ClusterNode1-${TIMESTAMP}
  expect:
    success: true
- name: delete_storage_cluster
  command:
  - DeleteDistributedStorageCluster
  args:
    clusterName: MachineCluster-${TIMESTAMP}
  expect:
    success: true
- name: delete_cluster_bridge
  command:
  - DeleteBridge
  args:
    regionName: ClusterRegion-${TIMESTAMP}
    bridgeName: ClusterBridge-${TIMESTAMP}
  expect:
    success: true
- name: delete_cluster_region
  command:
  - DeleteRegion
  args:
    regionName: ClusterRegion-${TIMESTAMP}
  expect:
    success: true
- name: delete_cluster_team
  command:
  - DeleteTeam
  args:
    teamName: ClusterTeam-${TIMESTAMP}
  expect:
    success: true
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
