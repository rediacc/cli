name: "USER_PASSWORD_MANAGEMENT_TEST"
description: "Test user password management operations as the user themselves"
executor: "rediacc-cli.py"

# This test requires the user to be created first (from 00030_user_management.yaml)
# It logs in as the test user and performs password operations

tests:
  - name: "activate_test_user"
    command: ["user", "activate", "${chain.test_user_email}"]
    args:
      code: "${config.test_environment.activation_code}"
      password: "${config.test_data.user.password}"
    expect:
      success: true
  
  - name: "login_as_test_user"
    command: ["login"]
    args:
      email: "${chain.test_user_email}"
      password: "${config.test_data.user.password}"
    expect:
      success: true
  
  - name: "update_own_password"
    command: ["user", "update-password"]
    args:
      new_password: "${config.test_data.user.new_password}"
    expect:
      success: true
  
  - name: "logout_test_user"
    command: ["logout"]
    expect:
      success: true
  
  - name: "verify_old_password_fails"
    command: ["login"]
    args:
      email: "${chain.test_user_email}"
      password: "${config.test_data.user.password}"
    expect:
      success: false  # Old password should not work
  
  - name: "login_with_new_password"
    command: ["login"]
    args:
      email: "${chain.test_user_email}"
      password: "${config.test_data.user.new_password}"
    expect:
      success: true
  
  - name: "logout_after_password_test"
    command: ["logout"]
    expect:
      success: true
  
  # Login back as admin for subsequent tests
  - name: "login_back_as_admin"
    command: ["login"]
    args:
      email: "${chain.admin_email}"
      password: "${chain.admin_password}"
    expect:
      success: true