name: CLONE_MACHINE_OPERATIONS_TEST
description: Test clone machine assignment operations with RBD hierarchy
executor: "commands/cli_main.py"
setup:
- name: create_test_company
  command:
  - CreateNewCompany
  args:
    companyName: CloneMachineCompany-${TIMESTAMP}
    email: clonemachine-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
    subscriptionPlan: ENTERPRISE
  expect:
    success: true
- name: activate_admin_account
  command:
  - ActivateUserAccount
  args:
    email: clonemachine-admin-${TIMESTAMP}@test.com
    activationCode: '111111'
    password: Test@Pass123!
  expect:
    success: true
- name: login_as_admin
  command:
  - CreateAuthenticationRequest
  args:
    email: clonemachine-admin-${TIMESTAMP}@test.com
    password: Test@Pass123!
  expect:
    success: true
- name: create_test_team
  command:
  - CreateTeam
  args:
    teamName: CloneTeam-${TIMESTAMP}
    teamVault: '{"storage": "enabled"}'
  expect:
    success: true
- name: create_test_region
  command:
  - CreateRegion
  args:
    regionName: CloneRegion-${TIMESTAMP}
    regionVault: '{"location": "test"}'
  expect:
    success: true
- name: create_test_bridge
  command:
  - CreateBridge
  args:
    regionName: CloneRegion-${TIMESTAMP}
    bridgeName: CloneBridge-${TIMESTAMP}
    bridgeVault: '{"type": "storage"}'
  expect:
    success: true
- name: create_machine1
  command:
  - CreateMachine
  args:
    teamName: CloneTeam-${TIMESTAMP}
    bridgeName: CloneBridge-${TIMESTAMP}
    machineName: CloneMachine1-${TIMESTAMP}
    machineVault: '{"ip": "10.0.0.1", "user": "root", "datastore": "/var/lib/rediacc"}'
  expect:
    success: true
- name: create_machine2
  command:
  - CreateMachine
  args:
    teamName: CloneTeam-${TIMESTAMP}
    bridgeName: CloneBridge-${TIMESTAMP}
    machineName: CloneMachine2-${TIMESTAMP}
    machineVault: '{"ip": "10.0.0.2", "user": "root", "datastore": "/var/lib/rediacc"}'
  expect:
    success: true
- name: create_machine3
  command:
  - CreateMachine
  args:
    teamName: CloneTeam-${TIMESTAMP}
    bridgeName: CloneBridge-${TIMESTAMP}
    machineName: CloneMachine3-${TIMESTAMP}
    machineVault: '{"ip": "10.0.0.3", "user": "root", "datastore": "/var/lib/rediacc"}'
  expect:
    success: true
- name: create_storage_cluster
  command:
  - CreateDistributedStorageCluster
  args:
    clusterName: CloneCluster-${TIMESTAMP}
    clusterVault: '{"type": "ceph", "monitors": "10.0.0.1:6789", "auth": "cephx"}'
  expect:
    success: true
- name: create_storage_pool
  command:
  - CreateDistributedStoragePool
  args:
    clusterName: CloneCluster-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    poolVault: '{"size": "10GB", "replicas": 3}'
  expect:
    success: true
- name: create_rbd_image
  command:
  - CreateDistributedStorageRbdImage
  args:
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    machineName: CloneMachine1-${TIMESTAMP}
    imageVault: '{"size": "1GB", "features": "layering"}'
  expect:
    success: true
- name: create_rbd_snapshot
  command:
  - CreateDistributedStorageRbdSnapshot
  args:
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
    snapshotName: CloneSnapshot-${TIMESTAMP}
    snapshotVault: '{"description": "Test snapshot for cloning"}'
  expect:
    success: true
- name: create_rbd_clone
  command:
  - CreateDistributedStorageRbdClone
  args:
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
    cloneName: TestClone-${TIMESTAMP}
    cloneVault: '{"parent": "CloneImage-${TIMESTAMP}"}'
  expect:
    success: true
tests:
- name: validate_clone_assignment
  command:
  - GetCloneMachineAssignmentValidation
  args:
    teamName: CloneTeam-${TIMESTAMP}
    machineNames: CloneMachine2-${TIMESTAMP},CloneMachine3-${TIMESTAMP}
  expect:
    success: true
  description: Validate machines for clone assignment
- name: assign_machines_to_clone
  command:
  - UpdateCloneMachineAssignments
  args:
    cloneName: TestClone-${TIMESTAMP}
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
    machineNames: CloneMachine2-${TIMESTAMP},CloneMachine3-${TIMESTAMP}
  expect:
    success: true
  description: Assign machines to RBD clone
- name: get_clone_machines
  command:
  - GetCloneMachines
  args:
    cloneName: TestClone-${TIMESTAMP}
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
    output_contains:
    - CloneMachine2-${TIMESTAMP}
    - CloneMachine3-${TIMESTAMP}
  description: Get machines assigned to clone
- name: remove_machine_from_clone
  command:
  - UpdateCloneMachineRemovals
  args:
    cloneName: TestClone-${TIMESTAMP}
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
    machineNames: CloneMachine3-${TIMESTAMP}
  expect:
    success: true
  description: Remove machine from clone assignment
- name: verify_machine_removed
  command:
  - GetCloneMachines
  args:
    cloneName: TestClone-${TIMESTAMP}
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
    output_contains: CloneMachine2-${TIMESTAMP}
    output_not_contains: CloneMachine3-${TIMESTAMP}
  description: Verify machine was removed from clone
- name: delete_clone
  command:
  - DeleteDistributedStorageRbdClone
  args:
    cloneName: TestClone-${TIMESTAMP}
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_snapshot
  command:
  - DeleteDistributedStorageRbdSnapshot
  args:
    snapshotName: CloneSnapshot-${TIMESTAMP}
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_image
  command:
  - DeleteDistributedStorageRbdImage
  args:
    imageName: CloneImage-${TIMESTAMP}
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_pool
  command:
  - DeleteDistributedStoragePool
  args:
    poolName: ClonePool-${TIMESTAMP}
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
- name: delete_cluster
  command:
  - DeleteDistributedStorageCluster
  args:
    clusterName: CloneCluster-${TIMESTAMP}
  expect:
    success: true
- name: delete_machines
  command:
  - DeleteMachine
  args:
    teamName: CloneTeam-${TIMESTAMP}
    machineName: CloneMachine1-${TIMESTAMP}
  expect:
    success: true
- name: delete_machine2
  command:
  - DeleteMachine
  args:
    teamName: CloneTeam-${TIMESTAMP}
    machineName: CloneMachine2-${TIMESTAMP}
  expect:
    success: true
- name: delete_machine3
  command:
  - DeleteMachine
  args:
    teamName: CloneTeam-${TIMESTAMP}
    machineName: CloneMachine3-${TIMESTAMP}
  expect:
    success: true
- name: delete_team
  command:
  - DeleteTeam
  args:
    teamName: CloneTeam-${TIMESTAMP}
  expect:
    success: true
- name: verify_cleanup_context
  command:
  - GetUserCompany
  expect:
    success: true
  description: Verify we're still authenticated before logout
- name: logout
  command:
  - DeleteUserRequest
  expect:
    success: true
  description: Logout and invalidate authentication token
