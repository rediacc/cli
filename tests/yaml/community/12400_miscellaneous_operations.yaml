name: "MISCELLANEOUS_OPERATIONS_TEST"
description: "Test remaining operations - GetQueueItemsNext, UpdateCompanyVaults, UpdateImageMachineAssignment"
executor: "rediacc-cli.py"

# Tests miscellaneous endpoints

setup:
  # Create test company
  - name: "create_test_company"
    command: ["CreateNewCompany"]
    args:
      companyName: "MiscOpsCompany-${TIMESTAMP}"
      email: "miscops-admin-${TIMESTAMP}@test.com"
      password: "Test@Pass123!"
      subscriptionPlan: "PREMIUM"
    expect:
      success: true
  
  - name: "activate_admin_account"
    command: ["ActivateUserAccount"]
    args:
      email: "miscops-admin-${TIMESTAMP}@test.com"
      activationCode: "111111"
      password: "Test@Pass123!"
    expect:
      success: true
  
  - name: "login_as_admin"
    command: ["login"]
    args:
      email: "miscops-admin-${TIMESTAMP}@test.com"
      password: "Test@Pass123!"
    expect:
      success: true

tests:
  # Test UpdateCompanyVaults - This should fail due to Global Bridge restriction
  - name: "update_company_vaults"
    command: ["UpdateCompanyVaults"]
    args:
      updates: '[{"vaultCredential": "dummy_credential", "vaultName": "default", "vaultContent": "{\"test\": \"batch_update\", \"timestamp\": \"${TIMESTAMP}\"}", "vaultVersion": 1}]'
    expect:
      success: false
      error_contains: "Global Bridge"
    description: "Update company vaults should fail due to Global Bridge restriction"
  
  # Note: GetQueueItemsNext requires bridge authentication token, not user credentials
  # This endpoint is used by bridges to poll for queue items
  # Cannot be tested with regular user authentication
  
  # Test UpdateImageMachineAssignment
  # This requires setting up distributed storage infrastructure
  - name: "create_test_team"
    command: ["CreateTeam"]
    args:
      teamName: "ImageTeam-${TIMESTAMP}"
      teamVault: '{"storage": "enabled"}'
    expect:
      success: true
  
  - name: "create_test_region"
    command: ["CreateRegion"]
    args:
      regionName: "ImageRegion-${TIMESTAMP}"
      regionVault: '{"location": "test"}'
    expect:
      success: true
  
  - name: "create_test_bridge"
    command: ["CreateBridge"]
    args:
      regionName: "ImageRegion-${TIMESTAMP}"
      bridgeName: "ImageBridge-${TIMESTAMP}"
      bridgeVault: '{"type": "storage"}'
    expect:
      success: true
  
  - name: "create_test_machine"
    command: ["CreateMachine"]
    args:
      teamName: "ImageTeam-${TIMESTAMP}"
      bridgeName: "ImageBridge-${TIMESTAMP}"
      machineName: "ImageMachine-${TIMESTAMP}"
      machineVault: '{"ip": "10.0.0.1", "user": "root", "datastore": "/var/lib/rediacc"}'
    expect:
      success: true
  
  - name: "create_storage_cluster"
    command: ["CreateDistributedStorageCluster"]
    args:
      clusterName: "ImageCluster-${TIMESTAMP}"
      clusterVault: '{"type": "ceph", "monitors": "10.0.0.1:6789"}'
    expect:
      success: true
  
  - name: "create_storage_pool"
    command: ["CreateDistributedStoragePool"]
    args:
      clusterName: "ImageCluster-${TIMESTAMP}"
      teamName: "ImageTeam-${TIMESTAMP}"
      poolName: "ImagePool-${TIMESTAMP}"
      poolVault: '{"size": "10GB"}'
    expect:
      success: true
  
  - name: "create_rbd_image"
    command: ["CreateDistributedStorageRbdImage"]
    args:
      poolName: "ImagePool-${TIMESTAMP}"
      teamName: "ImageTeam-${TIMESTAMP}"
      imageName: "TestImage-${TIMESTAMP}"
      machineName: "ImageMachine-${TIMESTAMP}"
      imageVault: '{"size": "1GB"}'
    expect:
      success: true
  
  # Test UpdateImageMachineAssignment
  - name: "update_image_machine_assignment"
    command: ["UpdateImageMachineAssignment"]
    args:
      imageName: "TestImage-${TIMESTAMP}"
      poolName: "ImagePool-${TIMESTAMP}"
      teamName: "ImageTeam-${TIMESTAMP}"
      newMachineName: "ImageMachine-${TIMESTAMP}"
    expect:
      success: true
    description: "Update machine assignment for RBD image"
  
  # Verify company vaults were updated
  - name: "get_company_vaults"
    command: ["GetCompanyVaults"]
    expect:
      success: true
      output_contains: "batch_update"
    description: "Verify company vaults were updated"
  
  # Clean up
  - name: "delete_image"
    command: ["DeleteDistributedStorageRbdImage"]
    args:
      imageName: "TestImage-${TIMESTAMP}"
      poolName: "ImagePool-${TIMESTAMP}"
      teamName: "ImageTeam-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_pool"
    command: ["DeleteDistributedStoragePool"]
    args:
      poolName: "ImagePool-${TIMESTAMP}"
      teamName: "ImageTeam-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_cluster"
    command: ["DeleteDistributedStorageCluster"]
    args:
      clusterName: "ImageCluster-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_machine"
    command: ["DeleteMachine"]
    args:
      teamName: "ImageTeam-${TIMESTAMP}"
      machineName: "ImageMachine-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_team"
    command: ["DeleteTeam"]
    args:
      teamName: "ImageTeam-${TIMESTAMP}"
    expect:
      success: true