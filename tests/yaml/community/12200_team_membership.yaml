name: "TEAM_MEMBERSHIP_TEST"
description: "Test team membership operations - add and remove users from teams"
executor: "rediacc-cli.py"

# Tests team membership management endpoints

setup:
  # Create test company
  - name: "create_test_company"
    command: ["CreateNewCompany"]
    args:
      companyName: "TeamMemberCompany-${TIMESTAMP}"
      email: "teammember-admin-${TIMESTAMP}@test.com"
      password: "Test@Pass123!"
      subscriptionPlan: "PREMIUM"
    expect:
      success: true
  
  - name: "activate_admin_account"
    command: ["ActivateUserAccount"]
    args:
      email: "teammember-admin-${TIMESTAMP}@test.com"
      activationCode: "111111"
      password: "Test@Pass123!"
    expect:
      success: true
  
  - name: "login_as_admin"
    command: ["login"]
    args:
      email: "teammember-admin-${TIMESTAMP}@test.com"
      password: "Test@Pass123!"
    expect:
      success: true

tests:
  # Create teams for testing
  - name: "create_team_alpha"
    command: ["CreateTeam"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
      teamVault: '{"description": "Alpha team for testing"}'
    expect:
      success: true
  
  - name: "create_team_beta"
    command: ["CreateTeam"]
    args:
      teamName: "TeamBeta-${TIMESTAMP}"
      teamVault: '{"description": "Beta team for testing"}'
    expect:
      success: true
  
  # Create users to add to teams
  - name: "create_user1"
    command: ["CreateNewUser"]
    args:
      newUserEmail: "teamuser1-${TIMESTAMP}@test.com"
      newUserHash: "0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5"
    expect:
      success: true
  
  - name: "activate_user1"
    command: ["ActivateUserAccount"]
    args:
      email: "teamuser1-${TIMESTAMP}@test.com"
      activationCode: "111111"
      password: "Test@Pass456!"
    expect:
      success: true
  
  - name: "create_user2"
    command: ["CreateNewUser"]
    args:
      newUserEmail: "teamuser2-${TIMESTAMP}@test.com"
      newUserHash: "0x5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5"
    expect:
      success: true
  
  - name: "activate_user2"
    command: ["ActivateUserAccount"]
    args:
      email: "teamuser2-${TIMESTAMP}@test.com"
      activationCode: "111111"
      password: "Test@Pass789!"
    expect:
      success: true
  
  # Test CreateTeamMembership - add user1 to TeamAlpha
  - name: "add_user1_to_team_alpha"
    command: ["CreateTeamMembership"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
      newUserEmail: "teamuser1-${TIMESTAMP}@test.com"
    expect:
      success: true
    description: "Add user1 to TeamAlpha"
  
  # Add user2 to TeamAlpha
  - name: "add_user2_to_team_alpha"
    command: ["CreateTeamMembership"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
      newUserEmail: "teamuser2-${TIMESTAMP}@test.com"
    expect:
      success: true
    description: "Add user2 to TeamAlpha"
  
  # Add user1 to TeamBeta (user can be in multiple teams)
  - name: "add_user1_to_team_beta"
    command: ["CreateTeamMembership"]
    args:
      teamName: "TeamBeta-${TIMESTAMP}"
      newUserEmail: "teamuser1-${TIMESTAMP}@test.com"
    expect:
      success: true
    description: "Add user1 to TeamBeta"
  
  # Verify team members
  - name: "get_team_alpha_members"
    command: ["GetTeamMembers"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
    expect:
      success: true
      output_contains: ["teamuser1-${TIMESTAMP}@test.com", "teamuser2-${TIMESTAMP}@test.com"]
    description: "Verify TeamAlpha members"
  
  - name: "get_team_beta_members"
    command: ["GetTeamMembers"]
    args:
      teamName: "TeamBeta-${TIMESTAMP}"
    expect:
      success: true
      output_contains: "teamuser1-${TIMESTAMP}@test.com"
    description: "Verify TeamBeta members"
  
  # Test DeleteUserFromTeam - remove user2 from TeamAlpha
  - name: "remove_user2_from_team_alpha"
    command: ["DeleteUserFromTeam"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
      removeUserEmail: "teamuser2-${TIMESTAMP}@test.com"
    expect:
      success: true
    description: "Remove user2 from TeamAlpha"
  
  # Verify user was removed
  - name: "verify_user2_removed"
    command: ["GetTeamMembers"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
    expect:
      success: true
      output_contains: "teamuser1-${TIMESTAMP}@test.com"
      output_not_contains: "teamuser2-${TIMESTAMP}@test.com"
    description: "Verify user2 was removed from TeamAlpha"
  
  # Try to add user to non-existent team (should fail)
  - name: "try_add_to_nonexistent_team"
    command: ["CreateTeamMembership"]
    args:
      teamName: "NonExistentTeam"
      newUserEmail: "teamuser1-${TIMESTAMP}@test.com"
    expect:
      success: false
    description: "Attempt to add user to non-existent team"
  
  # Try to remove non-member from team (should handle gracefully)
  - name: "try_remove_non_member"
    command: ["DeleteUserFromTeam"]
    args:
      teamName: "TeamBeta-${TIMESTAMP}"
      removeUserEmail: "teamuser2-${TIMESTAMP}@test.com"
    expect:
      success: false
    description: "Attempt to remove user who is not a team member"
  
  # Clean up teams
  - name: "delete_team_alpha"
    command: ["DeleteTeam"]
    args:
      teamName: "TeamAlpha-${TIMESTAMP}"
    expect:
      success: true
  
  - name: "delete_team_beta"
    command: ["DeleteTeam"]
    args:
      teamName: "TeamBeta-${TIMESTAMP}"
    expect:
      success: true