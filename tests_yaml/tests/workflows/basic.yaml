name: "Basic Workflow Operations"
description: "Comprehensive test of all workflow operations in sequence"
tags: [workflow, comprehensive]

dependencies:
  company: "TestCompany"

setup:
  # Generate random names for infrastructure
  - create_random_region_name: region_name
  - create_random_bridge_name: bridge_name
  - create_random_repository_name: source_repo_name
  - create_random_repository_name: self_dest_repo_name
  - create_random_repository_name: cross_dest_repo_name

steps:
  # ===== INFRASTRUCTURE SETUP =====
  # Create region
  - action: create
    entity: region
    params:
      name: "{{ region_name }}"
    capture:
      region_id: "$.id"
  
  # Create bridge
  - action: create
    entity: bridge
    params:
      region: "{{ region_name }}"
      name: "{{ bridge_name }}"
    capture:
      bridge_id: "$.id"
  
  # Create Private Team (or verify it exists)
  - action: create
    entity: team
    params:
      name: "Private Team"
  
  # Create machines
  - action: create
    entity: machine
    params:
      team: "Private Team"
      name: "rediacc11"
      bridge: "{{ bridge_name }}"
      region: "{{ region_name }}"
      vault:
        IP: "192.168.111.11"
        USER: "muhammed"
        DATASTORE: "/mnt/datastore"
    capture:
      machine11_id: "$.id"
  
  - action: create
    entity: machine
    params:
      team: "Private Team"
      name: "rediacc12"
      bridge: "{{ bridge_name }}"
      region: "{{ region_name }}"
      vault:
        IP: "192.168.111.12"
        USER: "muhammed"
        DATASTORE: "/mnt/datastore"
    capture:
      machine12_id: "$.id"
  
  # Wait for infrastructure to be ready
  - action: wait
    params:
      seconds: 2
  
  # ===== CONNECTIVITY TEST =====
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "connectivity-test", "--team", "Private Team", "--wait", "--wait-timeout", "60"]
    capture:
      connectivity_result: "$"
      total_machines: "$.data.total"
      successful_machines: "$.data.successful"
      failed_machines: "$.data.failed"
  
  # ===== SSH TEST =====
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "ssh-test", "--team", "Private Team", "--bridge", "{{ bridge_name }}", "--host", "192.168.111.11", "--user", "muhammed", "--wait", "--wait-timeout", "30"]
    capture:
      ssh_test_11_result: "$"
      ssh_test_11_status: "$.data.final_status"
  
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "ssh-test", "--team", "Private Team", "--bridge", "{{ bridge_name }}", "--host", "192.168.111.12", "--user", "muhammed", "--wait", "--wait-timeout", "30"]
    capture:
      ssh_test_12_result: "$"
      ssh_test_12_status: "$.data.final_status"
  
  # ===== HELLO TEST =====
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "hello-test", "--team", "Private Team", "--machine", "rediacc11", "--wait", "--wait-timeout", "60"]
    capture:
      hello_11_result: "$"
      hello_11_completed: "$.data.completed"
      hello_11_output: "$.data.command_output"
  
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "hello-test", "--team", "Private Team", "--machine", "rediacc12", "--wait", "--wait-timeout", "60"]
    capture:
      hello_12_result: "$"
      hello_12_completed: "$.data.completed"
      hello_12_output: "$.data.command_output"
  
  # ===== REPOSITORY CREATE =====
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "repo-create", "--team", "Private Team", "--name", "{{ source_repo_name }}", "--machine", "rediacc11", "--size", "100M", "--wait", "--wait-timeout", "300"]
    expect:
      success: true
    capture:
      repo_create_result: "$"
      repo_guid: "$.data.repository_guid"
      repo_create_completed: "$.data.completed"
      repo_create_status: "$.data.final_status"
  
  # ===== REPOSITORY PUSH =====
  # Self-push (same machine)
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "repo-push", "--source-team", "Private Team", "--source-machine", "rediacc11", "--source-repo", "{{ source_repo_name }}", "--dest-team", "Private Team", "--dest-machine", "rediacc11", "--dest-repo", "{{ self_dest_repo_name }}", "--wait", "--wait-timeout", "300"]
    expect:
      success: true
    capture:
      self_push_result: "$"
      self_push_completed: "$.data.completed"
      self_push_created_dest: "$.data.created_destination"
  
  # Cross-machine push
  - action: execute_raw
    params:
      args: ["--output", "json", "workflow", "repo-push", "--source-team", "Private Team", "--source-machine", "rediacc11", "--source-repo", "{{ source_repo_name }}", "--dest-team", "Private Team", "--dest-machine", "rediacc12", "--dest-repo", "{{ cross_dest_repo_name }}", "--wait", "--wait-timeout", "300"]
    expect:
      success: true
    capture:
      cross_push_result: "$"
      cross_push_completed: "$.data.completed"
      cross_push_status: "$.data.final_status"

cleanup:
  # Delete repositories
  - action: execute_raw
    params:
      args: ["--output", "json", "delete", "repository", "--team", "Private Team", "--name", "{{ source_repo_name }}"]
  
  - action: execute_raw
    params:
      args: ["--output", "json", "delete", "repository", "--team", "Private Team", "--name", "{{ self_dest_repo_name }}"]
  
  - action: execute_raw
    params:
      args: ["--output", "json", "delete", "repository", "--team", "Private Team", "--name", "{{ cross_dest_repo_name }}"]
  
  # Delete machines
  - action: delete
    entity: machine
    params:
      name: "rediacc11"
  
  - action: delete
    entity: machine
    params:
      name: "rediacc12"
  
  # Delete bridge
  - action: delete
    entity: bridge
    params:
      name: "{{ bridge_name }}"
  
  # Delete region
  - action: delete
    entity: region
    params:
      name: "{{ region_name }}"