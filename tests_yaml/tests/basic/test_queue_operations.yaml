# Queue operations test
name: "Queue Operations"
description: "Test queue create, list, trace, and various filter operations"
tags: [queue, basic]

dependencies:
  company: "TestCompany"

setup:
  - create_random_name: team_name
  - create_random_name: region_name
  - create_random_name: bridge_name
  - create_random_name: machine_name
  - create_random_name: machine2_name
  - create_random_name: repo_name

steps:
  # Create infrastructure for queue testing
  - action: create
    entity: team
    params:
      name: "{{ team_name }}"
    expect:
      success: true

  - action: create
    entity: region
    params:
      name: "{{ region_name }}"
    expect:
      success: true

  - action: create
    entity: bridge
    params:
      region: "{{ region_name }}"
      name: "{{ bridge_name }}"
    expect:
      success: true

  - action: create
    entity: machine
    params:
      team: "{{ team_name }}"
      bridge: "{{ bridge_name }}"
      name: "{{ machine_name }}"
      vault:
        ip: "10.0.0.1"
        user: "test"
    expect:
      success: true

  - action: create
    entity: machine
    params:
      team: "{{ team_name }}"
      bridge: "{{ bridge_name }}"
      name: "{{ machine2_name }}"
      vault:
        ip: "10.0.0.2"
        user: "test"
    expect:
      success: true

  # Test queue list-functions
  - action: execute_raw
    params:
      args: ["queue", "list-functions"]
    expect:
      success: true
    capture:
      available_functions: "$.data"

  # Test queue list-functions with JSON output
  - action: execute_raw
    params:
      args: ["--output", "json", "queue", "list-functions"]
    expect:
      success: true

  # Create queue items with different priorities
  - action: execute_raw
    params:
      args: ["create", "queue-item", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "--vault", '{"function": "test_default_priority"}']
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["create", "queue-item", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "--priority", "1", "--vault", '{"function": "test_high_priority"}']
    expect:
      success: true
    capture:
      high_priority_task_id: "$.data.task_id"

  - action: execute_raw
    params:
      args: ["create", "queue-item", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "--priority", "3", "--vault", '{"function": "test_medium_priority"}']
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["create", "queue-item", "{{ team_name }}", "{{ machine2_name }}", "{{ bridge_name }}", "--priority", "5", "--vault", '{"function": "test_low_priority"}']
    expect:
      success: true

  # Test invalid priority (should fail)
  - action: execute_raw
    params:
      args: ["create", "queue-item", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "--priority", "6", "--vault", '{"function": "test_invalid_priority"}']
    expect:
      success: false
      error: "*invalid*"

  # Test queue add command with various functions
  - action: execute_raw
    params:
      args: ["queue", "add", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "hello", "--description", "Test hello function"]
    expect:
      success: true

  # Create repository for repo functions
  - action: create
    entity: repository
    params:
      team: "{{ team_name }}"
      name: "{{ repo_name }}"
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "add", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "repo_new", "--repo", "TestRepo_Queue", "--size", "5G", "--priority", "8"]
    expect:
      success: true
    capture:
      repo_task_id: "$.data.task_id"

  - action: execute_raw
    params:
      args: ["queue", "add", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "os_setup", "--datastore-size", "90%", "--source", "custom-repo"]
    expect:
      success: true

  # Test queue add with missing required parameters (should fail)
  - action: execute_raw
    params:
      args: ["queue", "add", "{{ team_name }}", "{{ machine_name }}", "{{ bridge_name }}", "repo_new"]
    expect:
      success: false
      error: "*missing required parameter*"

  # Test queue list operations
  - action: execute_raw
    params:
      args: ["queue", "list"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--team", "{{ team_name }}"]
    expect:
      success: true
      output: "*{{ team_name }}*"

  - action: execute_raw
    params:
      args: ["queue", "list", "--machine", "{{ machine_name }}"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--bridge", "{{ bridge_name }}"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--status", "PENDING,PROCESSING"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--priority", "1"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--min-priority", "1", "--max-priority", "3"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--no-completed"]
    expect:
      success: true

  - action: execute_raw
    params:
      args: ["queue", "list", "--max-records", "5"]
    expect:
      success: true

  # Test queue list with JSON output
  - action: execute_raw
    params:
      args: ["--output", "json", "queue", "list", "--team", "{{ team_name }}"]
    expect:
      success: true
    capture:
      queue_list_json: "$"

  # Note: Queue trace tests are commented out because they depend on successfully capturing task_id
  # which may not always work if the API response format changes
  
  # # Test queue trace (if we have a task ID)
  # - action: execute_raw
  #   params:
  #     args: ["queue", "trace", "{{ high_priority_task_id }}"]
  #   expect:
  #     success: true
  #     output: "*QUEUE ITEM DETAILS*"
  #   continue_on_error: true  # Only run if task ID was captured

  # # Test queue trace with JSON output
  # - action: execute_raw
  #   params:
  #     args: ["--output", "json", "queue", "trace", "{{ high_priority_task_id }}"]
  #   expect:
  #     success: true
  #   continue_on_error: true  # Only run if task ID was captured

  # Note: Queue update-response and complete tests are commented out because they depend on task_id
  # # Test queue update-response (may fail if item already processed)
  # - action: execute_raw
  #   params:
  #     args: ["queue", "update-response", "{{ repo_task_id }}", "--vault", '{"status": "processing", "message": "Test update"}']
  #   expect:
  #     success: true
  #   continue_on_error: true  # May fail if item already processed

  # # Test queue complete (may fail if item already completed)
  # - action: execute_raw
  #   params:
  #     args: ["queue", "complete", "{{ repo_task_id }}", "--vault", '{"status": "completed", "result": "success"}']
  #   expect:
  #     success: true
  #   continue_on_error: true  # May fail if item already processed

  # Test error handling - trace with invalid task ID
  - action: execute_raw
    params:
      args: ["queue", "trace", "00000000-0000-0000-0000-000000000000"]
    expect:
      success: false

  # Test error handling - invalid priority in list
  - action: execute_raw
    params:
      args: ["queue", "list", "--priority", "7"]
    expect:
      success: false
      error: "*must be between*"

  # Test combined filters
  - action: execute_raw
    params:
      args: ["queue", "list", "--team", "{{ team_name }}", "--status", "PENDING", "--priority", "3", "--no-completed", "--max-records", "10"]
    expect:
      success: true

cleanup:
  # Wait a bit before cleanup
  # Note: Framework doesn't support wait action yet, commenting out
  # - action: wait
  #   params:
  #     seconds: 2

  # Note: Queue items are typically cleaned up automatically or by the bridge
  # We can't directly delete queue items in most cases

  # Delete infrastructure
  - action: delete
    entity: repository
    params:
      team: "{{ team_name }}"
      name: "{{ repo_name }}"

  - action: delete
    entity: machine
    params:
      team: "{{ team_name }}"
      name: "{{ machine2_name }}"

  - action: delete
    entity: machine
    params:
      team: "{{ team_name }}"
      name: "{{ machine_name }}"

  - action: delete
    entity: bridge
    params:
      region: "{{ region_name }}"
      name: "{{ bridge_name }}"

  - action: delete
    entity: region
    params:
      name: "{{ region_name }}"

  - action: delete
    entity: team
    params:
      name: "{{ team_name }}"